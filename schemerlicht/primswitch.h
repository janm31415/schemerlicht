//This file is autogenerated with primextract
switch (function_id)
  {
  case SCHEMERLICHT_ADD1:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);

  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_ADD1);

  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    ret.value.fx = 0;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        ret.type = schemerlicht_object_type_fixnum;
        ret.value.fx = arg->value.fx + 1;
        break;
      case schemerlicht_object_type_flonum:
        ret.type = schemerlicht_object_type_flonum;
        ret.value.fl = arg->value.fl + 1;
        break;
      case schemerlicht_object_type_char:
        ret.type = schemerlicht_object_type_char;
        ret.value.ch = arg->value.ch + 1;
        break;
      default:
        break;
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_FXADD1:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);

  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FXADD1);
#if 1
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    ret.value.fx = 0;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object ret;
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_fixnum;
      ret.value.fx = arg->value.fx + 1;
      }
    else
      ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
#else
  schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_fixnum;
  ret.value.fx = arg->value.fx + 1;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_FLADD1:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);

  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FLADD1);
#if 1
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_flonum;
    ret.value.fl = 0;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object ret;
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_flonum)
      {
      ret.type = schemerlicht_object_type_flonum;
      ret.value.fl = arg->value.fl + 1;
      }
    else
      ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
#else
  schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_flonum;
  ret.value.fl = arg->value.fl + 1.0;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_SUB1:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);

  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_SUB1);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    ret.value.fx = 0;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        ret.type = schemerlicht_object_type_fixnum;
        ret.value.fx = arg->value.fx - 1;
        break;
      case schemerlicht_object_type_flonum:
        ret.type = schemerlicht_object_type_flonum;
        ret.value.fl = arg->value.fl - 1;
        break;
      case schemerlicht_object_type_char:
        ret.type = schemerlicht_object_type_char;
        ret.value.ch = arg->value.ch - 1;
        break;
      default:
        break;
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_FXSUB1:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);

  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FXSUB1);
#if 1
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    ret.value.fx = 0;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object ret;
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_fixnum;
      ret.value.fx = arg->value.fx - 1;
      }
    else
      ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
#else
  schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_fixnum;
  ret.value.fx = arg->value.fx - 1;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_FLSUB1:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);

  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FLSUB1);
#if 1
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_flonum;
    ret.value.fl = 0;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object ret;
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_flonum)
      {
      ret.type = schemerlicht_object_type_flonum;
      ret.value.fl = arg->value.fl - 1;
      }
    else
      ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
#else
  schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_flonum;
  ret.value.fl = arg->value.fl - 1.0;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_ADD:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_ADD);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    ret.value.fx = 0;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    int type = schemerlicht_object_type_char;
    for (int j = 0; j < b; ++j)
      {
      schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
      if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_fixnum && schemerlicht_object_get_type(arg) != schemerlicht_object_type_flonum && schemerlicht_object_get_type(arg) != schemerlicht_object_type_char)
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }
      if (type < schemerlicht_object_get_type(arg))
        type = schemerlicht_object_get_type(arg);
      }
    schemerlicht_object ret;
    ret.type = type;
    switch (type)
      {
      case schemerlicht_object_type_fixnum:
      {
      ret.value.fx = 0;
      for (int j = 0; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        switch (schemerlicht_object_get_type(arg))
          {
          case schemerlicht_object_type_fixnum:
            ret.value.fx += arg->value.fx;
            break;
          case schemerlicht_object_type_char:
            ret.value.fx += cast(schemerlicht_fixnum, arg->value.ch);
            break;
          default:
            schemerlicht_assert(0);
            break;
          }
        }
      break;
      }
      case schemerlicht_object_type_flonum:
      {
      ret.value.fl = 0;
      for (int j = 0; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        switch (schemerlicht_object_get_type(arg))
          {
          case schemerlicht_object_type_flonum:
            ret.value.fl += arg->value.fl;
            break;
          case schemerlicht_object_type_fixnum:
            ret.value.fl += cast(schemerlicht_flonum, arg->value.fx);
            break;
          case schemerlicht_object_type_char:
            ret.value.fl += cast(schemerlicht_flonum, arg->value.ch);
            break;
          default:
            schemerlicht_assert(0);
            break;
          }
        }
      break;
      }
      case schemerlicht_object_type_char:
      {
      ret.value.ch = 0;
      for (int j = 0; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        ret.value.ch += arg->value.ch;
        }
      break;
      }
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_FXADD:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FXADD);
#if 1
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    ret.value.fx = 0;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    ret.value.fx = 0;
    for (int j = 0; j < b; ++j)
      {
      schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
      if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_fixnum)
        {
        ret.type = schemerlicht_object_type_undefined;
        break;
        }
      ret.value.fx += arg->value.fx;
      }
    schemerlicht_set_object(ra, &ret);
    }
#else
  schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_fixnum;
  ret.value.fx = arg0->value.fx + arg1->value.fx;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_FLADD:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FLADD);
#if 1
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_flonum;
    ret.value.fl = 0;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_flonum;
    ret.value.fl = 0;
    for (int j = 0; j < b; ++j)
      {
      schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
      if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_flonum)
        {
        ret.type = schemerlicht_object_type_undefined;
        break;
        }
      ret.value.fl += arg->value.fl;
      }
    schemerlicht_set_object(ra, &ret);
    }
#else
  schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_flonum;
  ret.value.fl = arg0->value.fl + arg1->value.fl;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_SUB:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_SUB);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    ret.value.fx = 0;
    schemerlicht_set_object(ra, &ret);
    }
  else if (b == 1)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_fixnum && schemerlicht_object_get_type(arg) != schemerlicht_object_type_flonum && schemerlicht_object_get_type(arg) != schemerlicht_object_type_char)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    schemerlicht_object ret;
    ret.type = arg->type & ~schemerlicht_int_gcmark_bit;
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_flonum:
        ret.value.fl = -arg->value.fl;
        break;
      case schemerlicht_object_type_fixnum:
        ret.value.fx = -arg->value.fx;
        break;
      case schemerlicht_object_type_char:
        ret.value.ch = -arg->value.ch;
        break;
      default:
        schemerlicht_assert(0);
        break;
      }
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    int type = schemerlicht_object_type_char;
    for (int j = 0; j < b; ++j)
      {
      schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
      if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_fixnum && schemerlicht_object_get_type(arg) != schemerlicht_object_type_flonum && schemerlicht_object_get_type(arg) != schemerlicht_object_type_char)
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }
      if (type < schemerlicht_object_get_type(arg))
        type = schemerlicht_object_get_type(arg);
      }
    schemerlicht_object ret;
    ret.type = type;
    switch (type)
      {
      case schemerlicht_object_type_fixnum:
      {
      schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
      switch (schemerlicht_object_get_type(first_arg))
        {
        case schemerlicht_object_type_fixnum:
          ret.value.fx = first_arg->value.fx;
          break;
        case schemerlicht_object_type_char:
          ret.value.fx = cast(schemerlicht_fixnum, first_arg->value.ch);
          break;
        default:
          schemerlicht_assert(0);
          return;
        }
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        switch (schemerlicht_object_get_type(arg))
          {
          case schemerlicht_object_type_fixnum:
            ret.value.fx -= arg->value.fx;
            break;
          case schemerlicht_object_type_char:
            ret.value.fx -= cast(schemerlicht_fixnum, arg->value.ch);
            break;
          default:
            schemerlicht_assert(0);
            break;
          }
        }
      break;
      }
      case schemerlicht_object_type_flonum:
      {
      schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
      switch (schemerlicht_object_get_type(first_arg))
        {
        case schemerlicht_object_type_flonum:
          ret.value.fl = first_arg->value.fl;
          break;
        case schemerlicht_object_type_fixnum:
          ret.value.fl = cast(schemerlicht_flonum, first_arg->value.fx);
          break;
        case schemerlicht_object_type_char:
          ret.value.fl = cast(schemerlicht_flonum, first_arg->value.ch);
          break;
        default:
          schemerlicht_assert(0);
          return;
        }
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        switch (schemerlicht_object_get_type(arg))
          {
          case schemerlicht_object_type_flonum:
            ret.value.fl -= arg->value.fl;
            break;
          case schemerlicht_object_type_fixnum:
            ret.value.fl -= cast(schemerlicht_flonum, arg->value.fx);
            break;
          case schemerlicht_object_type_char:
            ret.value.fl -= cast(schemerlicht_flonum, arg->value.ch);
            break;
          default:
            schemerlicht_assert(0);
            break;
          }
        }
      break;
      }
      case schemerlicht_object_type_char:
      {
      schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
      ret.value.ch = first_arg->value.ch;
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        ret.value.ch -= arg->value.ch;
        }
      break;
      }
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_FXSUB:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FXSUB);
#if 1
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    ret.value.fx = 0;
    schemerlicht_set_object(ra, &ret);
    }
  else if (b == 1)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_fixnum)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    ret.value.fx = -arg->value.fx;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    ret.value.fx = first_arg->value.fx;
    for (int j = 1; j < b; ++j)
      {
      schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
      if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_fixnum)
        {
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }
      ret.value.fx -= arg->value.fx;
      }
    schemerlicht_set_object(ra, &ret);
    }
#else
  schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_fixnum;
  ret.value.fx = arg0->value.fx - arg1->value.fx;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_FLSUB:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FLSUB);
#if 1
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_flonum;
    ret.value.fl = 0;
    schemerlicht_set_object(ra, &ret);
    }
  else if (b == 1)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_flonum)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_flonum;
    ret.value.fl = -arg->value.fl;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_flonum;
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_flonum)
      {
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    ret.value.fl = first_arg->value.fl;
    for (int j = 1; j < b; ++j)
      {
      schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
      if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_flonum)
        {
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }
      ret.value.fl -= arg->value.fl;
      }
    schemerlicht_set_object(ra, &ret);
    }
#else
  schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_flonum;
  ret.value.fl = arg0->value.fl - arg1->value.fl;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_MUL:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_MUL);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    ret.value.fx = 1;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    int type = schemerlicht_object_type_char;
    for (int j = 0; j < b; ++j)
      {
      schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
      if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_fixnum && schemerlicht_object_get_type(arg) != schemerlicht_object_type_flonum && schemerlicht_object_get_type(arg) != schemerlicht_object_type_char)
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }
      if (type < schemerlicht_object_get_type(arg))
        type = schemerlicht_object_get_type(arg);
      }
    schemerlicht_object ret;
    ret.type = type;
    switch (type)
      {
      case schemerlicht_object_type_fixnum:
      {
      schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
      switch (schemerlicht_object_get_type(first_arg))
        {
        case schemerlicht_object_type_fixnum:
          ret.value.fx = first_arg->value.fx;
          break;
        case schemerlicht_object_type_char:
          ret.value.fx = cast(schemerlicht_fixnum, first_arg->value.ch);
          break;
        default:
          schemerlicht_assert(0);
          return;
        }
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        switch (schemerlicht_object_get_type(arg))
          {
          case schemerlicht_object_type_fixnum:
            ret.value.fx *= arg->value.fx;
            break;
          case schemerlicht_object_type_char:
            ret.value.fx *= cast(schemerlicht_fixnum, arg->value.ch);
            break;
          default:
            schemerlicht_assert(0);
            break;
          }
        }
      break;
      }
      case schemerlicht_object_type_flonum:
      {
      schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
      switch (schemerlicht_object_get_type(first_arg))
        {
        case schemerlicht_object_type_flonum:
          ret.value.fl = first_arg->value.fl;
          break;
        case schemerlicht_object_type_fixnum:
          ret.value.fl = cast(schemerlicht_flonum, first_arg->value.fx);
          break;
        case schemerlicht_object_type_char:
          ret.value.fl = cast(schemerlicht_flonum, first_arg->value.ch);
          break;
        default:
          schemerlicht_assert(0);
          return;
        }
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        switch (schemerlicht_object_get_type(arg))
          {
          case schemerlicht_object_type_flonum:
            ret.value.fl *= arg->value.fl;
            break;
          case schemerlicht_object_type_fixnum:
            ret.value.fl *= cast(schemerlicht_flonum, arg->value.fx);
            break;
          case schemerlicht_object_type_char:
            ret.value.fl *= cast(schemerlicht_flonum, arg->value.ch);
            break;
          default:
            schemerlicht_assert(0);
            return;
          }
        }
      break;
      }
      case schemerlicht_object_type_char:
      {
      schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
      ret.value.ch = first_arg->value.ch;
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        ret.value.ch *= arg->value.ch;
        }
      break;
      }
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_FXMUL:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FXMUL);
#if 1
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    ret.value.fx = 1;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    ret.value.fx = first_arg->value.fx;
    for (int j = 1; j < b; ++j)
      {
      schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
      if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_fixnum)
        {
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }
      ret.value.fx *= arg->value.fx;
      }
    schemerlicht_set_object(ra, &ret);
    }
#else
  schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_fixnum;
  ret.value.fx = arg0->value.fx * arg1->value.fx;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_FLMUL:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FLMUL);
#if 1
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_flonum;
    ret.value.fl = 1;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_flonum;
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_flonum)
      {
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    ret.value.fl = first_arg->value.fl;
    for (int j = 1; j < b; ++j)
      {
      schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
      if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_flonum)
        {
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }
      ret.value.fl *= arg->value.fl;
      }
    schemerlicht_set_object(ra, &ret);
    }
#else
  schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_flonum;
  ret.value.fl = arg0->value.fl * arg1->value.fl;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_DIV:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_DIV);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    ret.value.fx = 1;
    schemerlicht_set_object(ra, &ret);
    }
  else if (b == 1)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_fixnum && schemerlicht_object_get_type(arg) != schemerlicht_object_type_flonum && schemerlicht_object_get_type(arg) != schemerlicht_object_type_char)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    schemerlicht_object ret;
    ret.type = arg->type & ~schemerlicht_int_gcmark_bit;
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_flonum:
        ret.value.fl = 1.0 / arg->value.fl;
        break;
      case schemerlicht_object_type_fixnum:
        ret.value.fx = 1 / arg->value.fx;
        break;
      case schemerlicht_object_type_char:
        ret.value.ch = 1 / arg->value.ch;
        break;
      default:
        schemerlicht_assert(0);
        break;
      }
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    int type = schemerlicht_object_type_char;
    for (int j = 0; j < b; ++j)
      {
      schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
      if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_fixnum && schemerlicht_object_get_type(arg) != schemerlicht_object_type_flonum && schemerlicht_object_get_type(arg) != schemerlicht_object_type_char)
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }
      if (type < schemerlicht_object_get_type(arg))
        type = schemerlicht_object_get_type(arg);
      }
    schemerlicht_object ret;
    ret.type = type;
    switch (type)
      {
      case schemerlicht_object_type_fixnum:
      {
      schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
      switch (schemerlicht_object_get_type(first_arg))
        {
        case schemerlicht_object_type_fixnum:
          ret.value.fx = first_arg->value.fx;
          break;
        case schemerlicht_object_type_char:
          ret.value.fx = cast(schemerlicht_fixnum, first_arg->value.ch);
          break;
        default:
          schemerlicht_assert(0);
          return;
        }
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        switch (schemerlicht_object_get_type(arg))
          {
          case schemerlicht_object_type_fixnum:
            if (arg->value.fx != 0)
              ret.value.fx /= arg->value.fx;
            else
              ret.type = schemerlicht_object_type_undefined;
            break;
          case schemerlicht_object_type_char:
            if (arg->value.ch != 0)
              ret.value.fx /= cast(schemerlicht_fixnum, arg->value.ch);
            else
              ret.type = schemerlicht_object_type_undefined;
            break;
          default:
            schemerlicht_assert(0);
            break;
          }
        }
      break;
      }
      case schemerlicht_object_type_flonum:
      {
      schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
      switch (schemerlicht_object_get_type(first_arg))
        {
        case schemerlicht_object_type_flonum:
          ret.value.fl = first_arg->value.fl;
          break;
        case schemerlicht_object_type_fixnum:
          ret.value.fl = cast(schemerlicht_flonum, first_arg->value.fx);
          break;
        case schemerlicht_object_type_char:
          ret.value.fl = cast(schemerlicht_flonum, first_arg->value.ch);
          break;
        default:
          schemerlicht_assert(0);
          return;
        }
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        switch (schemerlicht_object_get_type(arg))
          {
          case schemerlicht_object_type_flonum:
            ret.value.fl /= arg->value.fl;
            break;
          case schemerlicht_object_type_fixnum:
            ret.value.fl /= cast(schemerlicht_flonum, arg->value.fx);
            break;
          case schemerlicht_object_type_char:
            ret.value.fl /= cast(schemerlicht_flonum, arg->value.ch);
            break;
          default:
            schemerlicht_assert(0);
            break;
          }
        }
      break;
      }
      case schemerlicht_object_type_char:
      {
      schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
      ret.value.ch = first_arg->value.ch;
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        if (arg->value.ch != 0)
          ret.value.ch /= arg->value.ch;
        else
          ret.type = schemerlicht_object_type_undefined;
        }
      break;
      }
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_FXDIV:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FXDIV);
#if 1
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    ret.value.fx = 1;
    schemerlicht_set_object(ra, &ret);
    }
  else if (b == 1)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_fixnum)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    ret.value.fx = 1 / arg->value.fx;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    ret.value.fx = first_arg->value.fx;
    for (int j = 1; j < b; ++j)
      {
      schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
      if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_fixnum)
        {
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }
      ret.value.fx /= arg->value.fx;
      }
    schemerlicht_set_object(ra, &ret);
    }
#else
  schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_fixnum;
  ret.value.fx = arg0->value.fx / arg1->value.fx;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_FLDIV:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FLDIV);
#if 1
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_flonum;
    ret.value.fl = 1;
    schemerlicht_set_object(ra, &ret);
    }
  else if (b == 1)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_flonum)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_fixnum;
    ret.value.fl = 1.0 / arg->value.fl;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_flonum;
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_flonum)
      {
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    ret.value.fl = first_arg->value.fl;
    for (int j = 1; j < b; ++j)
      {
      schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
      if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_flonum)
        {
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }
      ret.value.fl /= arg->value.fl;
      }
    schemerlicht_set_object(ra, &ret);
    }
#else
  schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_flonum;
  ret.value.fl = arg0->value.fl / arg1->value.fl;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_EQUAL:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  //schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  //schemerlicht_assert(ra->value.fx == SCHEMERLICHT_EQUAL);
  if (b > 1)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    switch (schemerlicht_object_get_type(first_arg))
      {
      case schemerlicht_object_type_fixnum:
      {
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        switch (schemerlicht_object_get_type(arg))
          {
          case schemerlicht_object_type_fixnum:
          {
          if (first_arg->value.fx != arg->value.fx)
            {
            schemerlicht_object ret;
            ret.type = schemerlicht_object_type_false;
            schemerlicht_set_object(ra, &ret);
            return;
            }
          break;
          }
          case schemerlicht_object_type_flonum:
          {
          if (first_arg->value.fx != arg->value.fl)
            {
            schemerlicht_object ret;
            ret.type = schemerlicht_object_type_false;
            schemerlicht_set_object(ra, &ret);
            return;
            }
          break;
          }
          case schemerlicht_object_type_char:
          {
          if (first_arg->value.fx != arg->value.ch)
            {
            schemerlicht_object ret;
            ret.type = schemerlicht_object_type_false;
            schemerlicht_set_object(ra, &ret);
            return;
            }
          break;
          }
          default:
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_undefined;
          schemerlicht_set_object(ra, &ret);
          return;
          }
          }
        }
      break;
      }
      case schemerlicht_object_type_flonum:
      {
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        switch (schemerlicht_object_get_type(arg))
          {
          case schemerlicht_object_type_fixnum:
          {
          if (first_arg->value.fl != arg->value.fx)
            {
            schemerlicht_object ret;
            ret.type = schemerlicht_object_type_false;
            schemerlicht_set_object(ra, &ret);
            return;
            }
          break;
          }
          case schemerlicht_object_type_flonum:
          {
          if (first_arg->value.fl != arg->value.fl)
            {
            schemerlicht_object ret;
            ret.type = schemerlicht_object_type_false;
            schemerlicht_set_object(ra, &ret);
            return;
            }
          break;
          }
          case schemerlicht_object_type_char:
          {
          if (first_arg->value.fl != arg->value.ch)
            {
            schemerlicht_object ret;
            ret.type = schemerlicht_object_type_false;
            schemerlicht_set_object(ra, &ret);
            return;
            }
          break;
          }
          default:
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_undefined;
          schemerlicht_set_object(ra, &ret);
          return;
          }
          }
        }
      break;
      }
      case schemerlicht_object_type_char:
      {
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        switch (schemerlicht_object_get_type(arg))
          {
          case schemerlicht_object_type_fixnum:
          {
          if (first_arg->value.ch != arg->value.fx)
            {
            schemerlicht_object ret;
            ret.type = schemerlicht_object_type_false;
            schemerlicht_set_object(ra, &ret);
            return;
            }
          break;
          }
          case schemerlicht_object_type_flonum:
          {
          if (first_arg->value.ch != arg->value.fl)
            {
            schemerlicht_object ret;
            ret.type = schemerlicht_object_type_false;
            schemerlicht_set_object(ra, &ret);
            return;
            }
          break;
          }
          case schemerlicht_object_type_char:
          {
          if (first_arg->value.ch != arg->value.ch)
            {
            schemerlicht_object ret;
            ret.type = schemerlicht_object_type_false;
            schemerlicht_set_object(ra, &ret);
            return;
            }
          break;
          }
          default:
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_undefined;
          schemerlicht_set_object(ra, &ret);
          return;
          }
          }
        }
      break;
      }
      default:
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_FXEQUAL:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FXEQUAL);
#if 1
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_true;
    schemerlicht_set_object(ra, &ret);
    return;
    }
  schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_fixnum)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    return;
    }
  for (int j = 1; j < b; ++j)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_fixnum)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (first_arg->value.fx != arg->value.fx)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
#else
  schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = arg0->value.fx == arg1->value.fx ? schemerlicht_object_type_true : schemerlicht_object_type_false;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_FLEQUAL:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FLEQUAL);
#if 1
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_true;
    schemerlicht_set_object(ra, &ret);
    return;
    }
  schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_flonum)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    return;
    }
  for (int j = 1; j < b; ++j)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_flonum)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (first_arg->value.fl != arg->value.fl)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
#else
  schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = arg0->value.fl == arg1->value.fl ? schemerlicht_object_type_true : schemerlicht_object_type_false;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_CHAREQUAL:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHAREQUAL);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_true;
    schemerlicht_set_object(ra, &ret);
    return;
    }
  schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_char)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    return;
    }
  for (int j = 1; j < b; ++j)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_char)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (first_arg->value.ch != arg->value.ch)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_CHARCIEQUAL:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHARCIEQUAL);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_true;
    schemerlicht_set_object(ra, &ret);
    return;
    }
  schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_char)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    return;
    }
  for (int j = 1; j < b; ++j)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_char)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (to_lower(first_arg->value.ch) != to_lower(arg->value.ch))
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_NOT_EQUAL:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_NOT_EQUAL);
  schemerlicht_primitive_equal(ctxt, a, b, c);
  if (schemerlicht_object_get_type(ra) == schemerlicht_object_type_true)
    {
    ra->type = schemerlicht_object_type_false;
    }
  else if (schemerlicht_object_get_type(ra) == schemerlicht_object_type_false)
    {
    ra->type = schemerlicht_object_type_true;
    }
  }
  return;
  case SCHEMERLICHT_LESS:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_LESS);
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(first_arg))
      {
      case schemerlicht_object_type_fixnum:
      {
      switch (schemerlicht_object_get_type(second_arg))
        {
        case schemerlicht_object_type_fixnum:
        {
        if (first_arg->value.fx >= second_arg->value.fx)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_flonum:
        {
        if (first_arg->value.fx >= second_arg->value.fl)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_char:
        {
        if (first_arg->value.fx >= second_arg->value.ch)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        default:
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }

        }
      break;
      }
      case schemerlicht_object_type_flonum:
      {

      switch (schemerlicht_object_get_type(second_arg))
        {
        case schemerlicht_object_type_fixnum:
        {
        if (first_arg->value.fl >= second_arg->value.fx)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_flonum:
        {
        if (first_arg->value.fl >= second_arg->value.fl)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_char:
        {
        if (first_arg->value.fl >= second_arg->value.ch)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        default:
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }

        }
      break;
      }
      case schemerlicht_object_type_char:
      {
      switch (schemerlicht_object_get_type(second_arg))
        {
        case schemerlicht_object_type_fixnum:
        {
        if (first_arg->value.ch >= second_arg->value.fx)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_flonum:
        {
        if (first_arg->value.ch >= second_arg->value.fl)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_char:
        {
        if (first_arg->value.ch >= second_arg->value.ch)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        default:
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }
        }
      break;
      }
      default:
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_FXLESS:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FXLESS);
#if 1
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_fixnum || schemerlicht_object_get_type(second_arg) != schemerlicht_object_type_fixnum)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (first_arg->value.fx >= second_arg->value.fx)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
#else
  schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = arg0->value.fx < arg1->value.fx ? schemerlicht_object_type_true : schemerlicht_object_type_false;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_FLLESS:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FLLESS);
#if 1
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_flonum || schemerlicht_object_get_type(second_arg) != schemerlicht_object_type_flonum)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (first_arg->value.fl >= second_arg->value.fl)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
#else
  schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = arg0->value.fl < arg1->value.fl ? schemerlicht_object_type_true : schemerlicht_object_type_false;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_CHARLESS:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHARLESS);
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_char || schemerlicht_object_get_type(second_arg) != schemerlicht_object_type_char)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (first_arg->value.ch >= second_arg->value.ch)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_CHARCILESS:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHARCILESS);
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_char || schemerlicht_object_get_type(second_arg) != schemerlicht_object_type_char)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (to_lower(first_arg->value.ch) >= to_lower(second_arg->value.ch))
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_GEQ:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_GEQ);
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(first_arg))
      {
      case schemerlicht_object_type_fixnum:
      {
      switch (schemerlicht_object_get_type(second_arg))
        {
        case schemerlicht_object_type_fixnum:
        {
        if (first_arg->value.fx < second_arg->value.fx)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_flonum:
        {
        if (first_arg->value.fx < second_arg->value.fl)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_char:
        {
        if (first_arg->value.fx < second_arg->value.ch)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        default:
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }

        }
      break;
      }
      case schemerlicht_object_type_flonum:
      {

      switch (schemerlicht_object_get_type(second_arg))
        {
        case schemerlicht_object_type_fixnum:
        {
        if (first_arg->value.fl < second_arg->value.fx)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_flonum:
        {
        if (first_arg->value.fl < second_arg->value.fl)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_char:
        {
        if (first_arg->value.fl < second_arg->value.ch)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        default:
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }

        }
      break;
      }
      case schemerlicht_object_type_char:
      {
      switch (schemerlicht_object_get_type(second_arg))
        {
        case schemerlicht_object_type_fixnum:
        {
        if (first_arg->value.ch < second_arg->value.fx)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_flonum:
        {
        if (first_arg->value.ch < second_arg->value.fl)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_char:
        {
        if (first_arg->value.ch < second_arg->value.ch)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        default:
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }
        }
      break;
      }
      default:
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_FXGEQ:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FXGEQ);
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_fixnum || schemerlicht_object_get_type(second_arg) != schemerlicht_object_type_fixnum)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (first_arg->value.fx < second_arg->value.fx)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_FLGEQ:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FLGEQ);
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_flonum || schemerlicht_object_get_type(second_arg) != schemerlicht_object_type_flonum)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (first_arg->value.fl < second_arg->value.fl)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_CHARGEQ:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHARGEQ);
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_char || schemerlicht_object_get_type(second_arg) != schemerlicht_object_type_char)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (first_arg->value.ch < second_arg->value.ch)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_CHARCIGEQ:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHARCIGEQ);
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_char || schemerlicht_object_get_type(second_arg) != schemerlicht_object_type_char)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (to_lower(first_arg->value.ch) < to_lower(second_arg->value.ch))
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_GREATER:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_GREATER);
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(first_arg))
      {
      case schemerlicht_object_type_fixnum:
      {
      switch (schemerlicht_object_get_type(second_arg))
        {
        case schemerlicht_object_type_fixnum:
        {
        if (first_arg->value.fx <= second_arg->value.fx)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_flonum:
        {
        if (first_arg->value.fx <= second_arg->value.fl)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_char:
        {
        if (first_arg->value.fx <= second_arg->value.ch)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        default:
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }

        }
      break;
      }
      case schemerlicht_object_type_flonum:
      {

      switch (schemerlicht_object_get_type(second_arg))
        {
        case schemerlicht_object_type_fixnum:
        {
        if (first_arg->value.fl <= second_arg->value.fx)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_flonum:
        {
        if (first_arg->value.fl <= second_arg->value.fl)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_char:
        {
        if (first_arg->value.fl <= second_arg->value.ch)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        default:
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }

        }
      break;
      }
      case schemerlicht_object_type_char:
      {
      switch (schemerlicht_object_get_type(second_arg))
        {
        case schemerlicht_object_type_fixnum:
        {
        if (first_arg->value.ch <= second_arg->value.fx)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_flonum:
        {
        if (first_arg->value.ch <= second_arg->value.fl)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_char:
        {
        if (first_arg->value.ch <= second_arg->value.ch)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        default:
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }
        }
      break;
      }
      default:
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_FXGREATER:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FXGREATER);
#if 1
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_fixnum || schemerlicht_object_get_type(second_arg) != schemerlicht_object_type_fixnum)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (first_arg->value.fx <= second_arg->value.fx)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
#else
  schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = arg0->value.fx > arg1->value.fx ? schemerlicht_object_type_true : schemerlicht_object_type_false;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_FLGREATER:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FLGREATER);
#if 1
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_flonum || schemerlicht_object_get_type(second_arg) != schemerlicht_object_type_flonum)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (first_arg->value.fl <= second_arg->value.fl)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
#else
  schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = arg0->value.fl > arg1->value.fl ? schemerlicht_object_type_true : schemerlicht_object_type_false;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_CHARGREATER:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHARGREATER);
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_char || schemerlicht_object_get_type(second_arg) != schemerlicht_object_type_char)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (first_arg->value.ch <= second_arg->value.ch)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_CHARCIGREATER:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHARCIGREATER);
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_char || schemerlicht_object_get_type(second_arg) != schemerlicht_object_type_char)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (to_lower(first_arg->value.ch) <= to_lower(second_arg->value.ch))
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_LEQ:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_LEQ);
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(first_arg))
      {
      case schemerlicht_object_type_fixnum:
      {
      switch (schemerlicht_object_get_type(second_arg))
        {
        case schemerlicht_object_type_fixnum:
        {
        if (first_arg->value.fx > second_arg->value.fx)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_flonum:
        {
        if (first_arg->value.fx > second_arg->value.fl)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_char:
        {
        if (first_arg->value.fx > second_arg->value.ch)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        default:
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }

        }
      break;
      }
      case schemerlicht_object_type_flonum:
      {

      switch (schemerlicht_object_get_type(second_arg))
        {
        case schemerlicht_object_type_fixnum:
        {
        if (first_arg->value.fl > second_arg->value.fx)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_flonum:
        {
        if (first_arg->value.fl > second_arg->value.fl)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_char:
        {
        if (first_arg->value.fl > second_arg->value.ch)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        default:
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }

        }
      break;
      }
      case schemerlicht_object_type_char:
      {
      switch (schemerlicht_object_get_type(second_arg))
        {
        case schemerlicht_object_type_fixnum:
        {
        if (first_arg->value.ch > second_arg->value.fx)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_flonum:
        {
        if (first_arg->value.ch > second_arg->value.fl)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        case schemerlicht_object_type_char:
        {
        if (first_arg->value.ch > second_arg->value.ch)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &ret);
          return;
          }
        break;
        }
        default:
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }
        }
      break;
      }
      default:
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_FXLEQ:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FXLEQ);
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_fixnum || schemerlicht_object_get_type(second_arg) != schemerlicht_object_type_fixnum)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (first_arg->value.fx > second_arg->value.fx)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_FLLEQ:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FLLEQ);
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_flonum || schemerlicht_object_get_type(second_arg) != schemerlicht_object_type_flonum)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (first_arg->value.fl > second_arg->value.fl)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_CHARLEQ:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHARLEQ);
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_char || schemerlicht_object_get_type(second_arg) != schemerlicht_object_type_char)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (first_arg->value.ch > second_arg->value.ch)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_CHARCILEQ:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHARCILEQ);
  for (int j = 0; j < b - 1; ++j)
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* second_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(first_arg) != schemerlicht_object_type_char || schemerlicht_object_get_type(second_arg) != schemerlicht_object_type_char)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    if (to_lower(first_arg->value.ch) > to_lower(second_arg->value.ch))
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_false;
      schemerlicht_set_object(ra, &ret);
      return;
      }
    }
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_true;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_IS_FIXNUM:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_FIXNUM);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_fixnum)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_IS_FLONUM:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_FLONUM);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_flonum)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_IS_NULL:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_NULL);
  if (b == 0)
    {
    schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_INVALID_NUMBER_OF_ARGUMENTS, -1, -1, "null? needs an argument");
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_nil)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_IS_ZERO:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_ZERO);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_true;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_false;
    switch (schemerlicht_object_get_type(first_arg))
      {
      case schemerlicht_object_type_fixnum:
        if (first_arg->value.fx == 0)
          ret.type = schemerlicht_object_type_true;
        break;
      case schemerlicht_object_type_flonum:
        if (first_arg->value.fl == 0)
          ret.type = schemerlicht_object_type_true;
        break;
      case schemerlicht_object_type_char:
        if (first_arg->value.ch == 0)
          ret.type = schemerlicht_object_type_true;
        break;
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_FXZERO:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FXZERO);
#if 1
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_true;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_false;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_fixnum && first_arg->value.fx == 0)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    schemerlicht_set_object(ra, &ret);
    }
#else
  schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = arg0->value.fx == 0 ? schemerlicht_object_type_true : schemerlicht_object_type_false;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_FLZERO:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FLZERO);
#if 1
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_true;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_false;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_flonum && first_arg->value.fl == 0)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    schemerlicht_set_object(ra, &ret);
    }
#else
  schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object ret;
  ret.type = arg0->value.fl == 0.0 ? schemerlicht_object_type_true : schemerlicht_object_type_false;
  schemerlicht_set_object(ra, &ret);
#endif
  }
  return;
  case SCHEMERLICHT_IS_BOOLEAN:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_BOOLEAN);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_true || schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_false)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_IS_CHAR:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_CHAR);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_char)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_NOT:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_NOT);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_false;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_false)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_FIXNUM_CHAR:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FIXNUM_CHAR);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_char;
      ret.value.ch = cast(schemerlicht_byte, first_arg->value.fx);
      }
    else
      {
      ret.type = schemerlicht_object_type_undefined;
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_FIXNUM_FLONUM:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FIXNUM_FLONUM);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_flonum;
      ret.value.fl = cast(double, first_arg->value.fx);
      }
    else if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_flonum)
      {
      ret.type = schemerlicht_object_type_flonum;
      ret.value.fl = first_arg->value.fl;
      }
    else
      {
      ret.type = schemerlicht_object_type_undefined;
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_CHAR_FIXNUM:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHAR_FIXNUM);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_char)
      {
      ret.type = schemerlicht_object_type_fixnum;
      ret.value.fx = cast(schemerlicht_fixnum, first_arg->value.ch);
      }
    else
      {
      ret.type = schemerlicht_object_type_undefined;
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_FLONUM_FIXNUM:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FLONUM_FIXNUM);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_flonum)
      {
      ret.type = schemerlicht_object_type_fixnum;
      ret.value.fx = cast(schemerlicht_fixnum, first_arg->value.fl);
      }
    else if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_fixnum;
      ret.value.fx = first_arg->value.fx;
      }
    else
      {
      ret.type = schemerlicht_object_type_undefined;
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_BITWISE_AND:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_BITWISE_AND);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_fixnum;
      ret.value.fx = first_arg->value.fx;
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* next_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        if (schemerlicht_object_get_type(next_arg) == schemerlicht_object_type_fixnum)
          {
          ret.value.fx &= next_arg->value.fx;
          }
        else
          {
          ret.type = schemerlicht_object_type_undefined;
          break;
          }
        }
      }
    else
      {
      ret.type = schemerlicht_object_type_undefined;
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_BITWISE_OR:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_BITWISE_OR);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_fixnum;
      ret.value.fx = first_arg->value.fx;
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* next_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        if (schemerlicht_object_get_type(next_arg) == schemerlicht_object_type_fixnum)
          {
          ret.value.fx |= next_arg->value.fx;
          }
        else
          {
          ret.type = schemerlicht_object_type_undefined;
          break;
          }
        }
      }
    else
      {
      ret.type = schemerlicht_object_type_undefined;
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_BITWISE_NOT:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_BITWISE_NOT);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_fixnum;
      ret.value.fx = ~first_arg->value.fx;
      }
    else
      {
      ret.type = schemerlicht_object_type_undefined;
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_BITWISE_XOR:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_BITWISE_XOR);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_fixnum;
      ret.value.fx = first_arg->value.fx;
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* next_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        if (schemerlicht_object_get_type(next_arg) == schemerlicht_object_type_fixnum)
          {
          ret.value.fx ^= next_arg->value.fx;
          }
        else
          {
          ret.type = schemerlicht_object_type_undefined;
          break;
          }
        }
      }
    else
      {
      ret.type = schemerlicht_object_type_undefined;
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_ARITHMETIC_SHIFT:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_ARITHMETIC_SHIFT);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object ret;
    if (schemerlicht_object_get_type(first_arg) == schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_fixnum;
      ret.value.fx = first_arg->value.fx;
      if (b > 1)
        {
        schemerlicht_object* next_arg = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
        if (schemerlicht_object_get_type(next_arg) == schemerlicht_object_type_fixnum)
          {
          if (next_arg->value.fx >= 0)
            ret.value.fx <<= next_arg->value.fx;
          else
            ret.value.fx >>= (-next_arg->value.fx);
          }
        else
          {
          ret.type = schemerlicht_object_type_undefined;
          }
        }
      }
    else
      {
      ret.type = schemerlicht_object_type_undefined;
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_VECTOR:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_VECTOR);
  schemerlicht_object v = make_schemerlicht_object_vector(ctxt, b);
  for (int j = 0; j < b; ++j)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    schemerlicht_object* obj_at_pos = schemerlicht_vector_at(&v.value.v, j, schemerlicht_object);
    schemerlicht_set_object(obj_at_pos, arg);
    }
  schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
  schemerlicht_set_object(heap_obj, &v);
  ++ctxt->heap_pos;
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_VECTORREF:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_VECTORREF);
  schemerlicht_object ret;
  if (b < 2)
    {
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* pos = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) != schemerlicht_object_type_vector || schemerlicht_object_get_type(pos) != schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_undefined;
      }
    else
      {
      if (pos->value.fx < 0 || pos->value.fx >= v->value.v.vector_size) // out of bounds
        {
        ret.type = schemerlicht_object_type_undefined;
        }
      else
        {
        ret = *schemerlicht_vector_at(&v->value.v, pos->value.fx, schemerlicht_object);
        }
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_VECTORSET:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_VECTORSET);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_void;
  if (b > 2)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* pos = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    schemerlicht_object* value = schemerlicht_vector_at(&ctxt->stack, a + 3 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_vector && schemerlicht_object_get_type(pos) == schemerlicht_object_type_fixnum)
      {
      if (pos->value.fx >= 0 && pos->value.fx < v->value.v.vector_size)
        {
        schemerlicht_object* value_to_change = schemerlicht_vector_at(&v->value.v, pos->value.fx, schemerlicht_object);
        schemerlicht_set_object(value_to_change, value);
        }
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_IS_VECTOR:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_VECTOR);
  schemerlicht_object ret;
  if (b > 0)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_vector)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    }
  else
    {
    ret.type = schemerlicht_object_type_false;
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_IS_PAIR:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_PAIR);
  schemerlicht_object ret;
  if (b > 0)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_pair)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    }
  else
    {
    ret.type = schemerlicht_object_type_false;
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_CONS:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CONS);
  schemerlicht_object v = make_schemerlicht_object_pair(ctxt);
  schemerlicht_object* v0 = schemerlicht_vector_at(&v.value.v, 0, schemerlicht_object);
  schemerlicht_object* v1 = schemerlicht_vector_at(&v.value.v, 1, schemerlicht_object);
  if (b == 0)
    {
    schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_INVALID_NUMBER_OF_ARGUMENTS, -1, -1, "cons needs two arguments");
    v0->type = schemerlicht_object_type_undefined;
    v1->type = schemerlicht_object_type_undefined;
    }
  else if (b == 1)
    {
    schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_INVALID_NUMBER_OF_ARGUMENTS, -1, -1, "cons needs two arguments");
    schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_set_object(v0, arg0);
    v1->type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    schemerlicht_set_object(v0, arg0);
    schemerlicht_set_object(v1, arg1);
    }
  schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
  schemerlicht_set_object(heap_obj, &v);
  ++ctxt->heap_pos;
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_LIST:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_LIST);
  if (b == 0)
    {
    schemerlicht_object v;
    v.type = schemerlicht_object_type_nil;
    schemerlicht_set_object(ra, &v);
    }
  else
    {
    schemerlicht_object obj1 = make_schemerlicht_object_pair(ctxt);
    schemerlicht_object* v0 = schemerlicht_vector_at(&obj1.value.v, 0, schemerlicht_object);
    schemerlicht_object* v1 = schemerlicht_vector_at(&obj1.value.v, 1, schemerlicht_object);
    v1->type = schemerlicht_object_type_nil;
    schemerlicht_object* last_arg = schemerlicht_vector_at(&ctxt->stack, a + b + c, schemerlicht_object);
    schemerlicht_set_object(v0, last_arg);
    schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
    schemerlicht_set_object(heap_obj, &obj1);
    ++ctxt->heap_pos;
    for (int j = b - 1; j >= 1; --j)
      {
      schemerlicht_object obj2 = make_schemerlicht_object_pair(ctxt);
      v0 = schemerlicht_vector_at(&obj2.value.v, 0, schemerlicht_object);
      v1 = schemerlicht_vector_at(&obj2.value.v, 1, schemerlicht_object);
      schemerlicht_set_object(v1, heap_obj);
      schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + j + c, schemerlicht_object);
      schemerlicht_set_object(v0, arg);
      heap_obj = &ctxt->heap[ctxt->heap_pos];
      schemerlicht_set_object(heap_obj, &obj2);
      ++ctxt->heap_pos;
      }
    schemerlicht_set_object(ra, heap_obj);
    }
  }
  return;
  case SCHEMERLICHT_CDR:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CDR);
  schemerlicht_object ret;
  if (b < 1)
    {
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) != schemerlicht_object_type_pair)
      {
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_BAD_SYNTAX, -1, -1, "cdr on an object that is not a pair");
      ret.type = schemerlicht_object_type_undefined;
      }
    else
      {
      ret = *schemerlicht_vector_at(&v->value.v, 1, schemerlicht_object);
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_CAR:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CAR);
  schemerlicht_object ret;
  if (b < 1)
    {
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) != schemerlicht_object_type_pair)
      {
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_BAD_SYNTAX, -1, -1, "car on an object that is not a pair");
      ret.type = schemerlicht_object_type_undefined;
      }
    else
      {
      ret = *schemerlicht_vector_at(&v->value.v, 0, schemerlicht_object);
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_HALT:
  {
  UNUSED(c);
  UNUSED(b);
  UNUSED(a);
  UNUSED(ctxt);
  }
  return;
  case SCHEMERLICHT_CLOSURE:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CLOSURE);
  schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
  *heap_obj = make_schemerlicht_object_closure(ctxt, b);
  ++ctxt->heap_pos;
#if 1
  memcpy(heap_obj->value.v.vector_ptr, cast(schemerlicht_object*, ctxt->stack.vector_ptr) + a + c + 1, b * sizeof(schemerlicht_object));
#else
  for (int j = 0; j < b; ++j)
    {
    schemerlicht_object* target = schemerlicht_vector_at(&heap_obj->value.v, j, schemerlicht_object);
    const schemerlicht_object* source = schemerlicht_vector_at(&ctxt->stack, a + c + 1 + j, schemerlicht_object);
    schemerlicht_set_object(target, source);
    }
#endif
#ifdef SCHEMERLICHT_DEBUG
  schemerlicht_object* lambda = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  if (schemerlicht_object_get_type(lambda) != schemerlicht_object_type_lambda)
    {
    schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_INVALID_ARGUMENT, -1, -1, "closure without a lambda as first argument");
    }
#endif
  schemerlicht_set_object(ra, heap_obj);
  }
  return;
  case SCHEMERLICHT_CLOSUREREF:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CLOSUREREF);
#ifdef SCHEMERLICHT_DEBUG
  schemerlicht_object ret;
  if (b < 2)
    {
    schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_INVALID_NUMBER_OF_ARGUMENTS, -1, -1, "closure-ref expects 2 arguments.");
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* pos = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) != schemerlicht_object_type_closure || schemerlicht_object_get_type(pos) != schemerlicht_object_type_fixnum)
      {
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_INVALID_ARGUMENT, -1, -1, "closure-ref expects a closure and an index as argument.");
      ret.type = schemerlicht_object_type_undefined;
      }
    else
      {
      if (pos->value.fx < 0 || pos->value.fx >= v->value.v.vector_size) // out of bounds
        {
        schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_INVALID_ARGUMENT, -1, -1, "closure-ref index is out of bounds.");
        ret.type = schemerlicht_object_type_undefined;
        }
      else
        {
        ret = *schemerlicht_vector_at(&v->value.v, pos->value.fx, schemerlicht_object);
        }
      }
    }
  schemerlicht_set_object(ra, &ret);
#else
  schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
  schemerlicht_object* pos = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
  schemerlicht_set_object(ra, schemerlicht_vector_at(&v->value.v, pos->value.fx, schemerlicht_object));
  UNUSED(b);
#endif
  }
  return;
  case SCHEMERLICHT_IS_CLOSURE:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_CLOSURE);
  schemerlicht_object ret;
  if (b > 0)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_closure)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    }
  else
    {
    ret.type = schemerlicht_object_type_false;
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_IS_PROCEDURE:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_PROCEDURE);
  schemerlicht_object ret;
  if (b > 0)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_closure || schemerlicht_object_get_type(v) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(v) == schemerlicht_object_type_lambda || schemerlicht_object_get_type(v) == schemerlicht_object_type_primitive_object)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    }
  else
    {
    ret.type = schemerlicht_object_type_false;
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_MAKE_VECTOR:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_MAKE_VECTOR);
  schemerlicht_memsize vector_length = 0;
  if (b > 0)
    {
    schemerlicht_object* rb = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    switch (schemerlicht_object_get_type(rb))
      {
      case schemerlicht_object_type_fixnum:
        if (rb->value.fx > 0)
          vector_length = cast(schemerlicht_memsize, rb->value.fx);
        break;
      case schemerlicht_object_type_flonum:
        if (rb->value.fl > 0)
          vector_length = cast(schemerlicht_memsize, rb->value.fl);
        break;
      }
    }
  schemerlicht_object v = make_schemerlicht_object_vector(ctxt, vector_length);
  schemerlicht_object dummy;
  dummy.type = schemerlicht_object_type_undefined;
  schemerlicht_object* fill_obj = &dummy;
  if (b > 1)
    {
    fill_obj = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    }
  for (schemerlicht_memsize j = 0; j < vector_length; ++j)
    {
    schemerlicht_object* obj_at_pos = schemerlicht_vector_at(&v.value.v, j, schemerlicht_object);
    schemerlicht_set_object(obj_at_pos, fill_obj);
    }
  schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
  schemerlicht_set_object(heap_obj, &v);
  ++ctxt->heap_pos;
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_MAKE_STRING:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_MAKE_STRING);
  schemerlicht_object v;
  v.type = schemerlicht_object_type_string;
  schemerlicht_memsize string_length = 0;
  if (b > 0)
    {
    schemerlicht_object* rb = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    switch (schemerlicht_object_get_type(rb))
      {
      case schemerlicht_object_type_fixnum:
        if (rb->value.fx > 0)
          string_length = cast(schemerlicht_memsize, rb->value.fx);
        break;
      case schemerlicht_object_type_flonum:
        if (rb->value.fl > 0)
          string_length = cast(schemerlicht_memsize, rb->value.fl);
        break;
      }
    }
  char ch = '#';
  if (b > 1)
    {
    schemerlicht_object* character = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(character) == schemerlicht_object_type_char)
      ch = character->value.ch;
    }
  schemerlicht_string_init_with_size(ctxt, &v.value.s, string_length, ch);
  schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
  schemerlicht_set_object(heap_obj, &v);
  ++ctxt->heap_pos;
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_VECTOR_LENGTH:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_VECTOR_LENGTH);
  schemerlicht_object v;
  v.type = schemerlicht_object_type_fixnum;
  v.value.fx = 0;
  if (b > 0)
    {
    schemerlicht_object* rb = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(rb) == schemerlicht_object_type_vector)
      v.value.fx = rb->value.v.vector_size;
    }
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_STRING_LENGTH:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING_LENGTH);
  schemerlicht_object v;
  v.type = schemerlicht_object_type_fixnum;
  v.value.fx = 0;
  if (b > 0)
    {
    schemerlicht_object* rb = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(rb) == schemerlicht_object_type_string)
      v.value.fx = rb->value.s.string_length;
    }
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_STRING_REF:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING_REF);
  schemerlicht_object ret;
  if (b < 2)
    {
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* pos = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) != schemerlicht_object_type_string || schemerlicht_object_get_type(pos) != schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_undefined;
      }
    else
      {
      if (pos->value.fx < 0 || pos->value.fx >= v->value.s.string_length) // out of bounds
        {
        ret.type = schemerlicht_object_type_undefined;
        }
      else
        {
        char* ch = schemerlicht_string_at(&v->value.s, cast(schemerlicht_memsize, pos->value.fx));
        ret.type = schemerlicht_object_type_char;
        ret.value.ch = *ch;
        }
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_STRING_SET:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING_SET);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_void;
  if (b > 2)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* pos = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    schemerlicht_object* value = schemerlicht_vector_at(&ctxt->stack, a + 3 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_string && schemerlicht_object_get_type(pos) == schemerlicht_object_type_fixnum && schemerlicht_object_get_type(value) == schemerlicht_object_type_char)
      {
      if (pos->value.fx >= 0 && pos->value.fx < v->value.s.string_length)
        {
        char* value_to_change = schemerlicht_string_at(&v->value.s, cast(schemerlicht_memsize, pos->value.fx));
        *value_to_change = value->value.ch;
        }
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_STRING_HASH:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING_HASH);
  schemerlicht_object ret;
  if (b == 0)
    {
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* rb = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(rb) == schemerlicht_object_type_string)
      {
      ret.type = schemerlicht_object_type_fixnum;
      ret.value.fx = 5381;
      char* str = rb->value.s.string_ptr;
      int ch;
      while ((ch = *str++) != 0)
        ret.value.fx = ((ret.value.fx << 5) + ret.value.fx) + ch; /* ret.value.fx * 33 + ch */
      }
    else
      {
      ret.type = schemerlicht_object_type_undefined;
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_IS_STRING:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_STRING);
  schemerlicht_object ret;
  if (b > 0)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_string)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    }
  else
    {
    ret.type = schemerlicht_object_type_false;
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_EQ:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_EQ);
  int result = 0;
  if (b >= 2)
    {
    schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    result = schemerlicht_objects_eq(arg0, arg1);
    }
  schemerlicht_object ret;
  ret.type = result ? schemerlicht_object_type_true : schemerlicht_object_type_false;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_EQV:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_EQV);
  int result = 0;
  if (b >= 2)
    {
    schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    result = schemerlicht_objects_eqv(arg0, arg1);
    }
  schemerlicht_object ret;
  ret.type = result ? schemerlicht_object_type_true : schemerlicht_object_type_false;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_IS_EQUAL:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_EQUAL);
  int result = 0;
  if (b >= 2)
    {
    schemerlicht_object* arg0 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    result = schemerlicht_objects_equal(ctxt, arg0, arg1);
    }
  schemerlicht_object ret;
  ret.type = result ? schemerlicht_object_type_true : schemerlicht_object_type_false;
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_STRING:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING);
  schemerlicht_object v;
  v.type = schemerlicht_object_type_string;
  schemerlicht_string_init_with_size(ctxt, &v.value.s, b, '#');
  for (int j = 0; j < b; ++j)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_char)
      {
      char* ch = schemerlicht_string_at(&v.value.s, j);
      *ch = arg->value.ch;
      }
    }
  schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
  schemerlicht_set_object(heap_obj, &v);
  ++ctxt->heap_pos;
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_STRING_TO_SYMBOL:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING_TO_SYMBOL);
  if (b == 0)
    {
    schemerlicht_object v;
    v.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &v);
    }
  else
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_string)
      {
      schemerlicht_object* symbol = schemerlicht_map_get(ctxt, ctxt->string_to_symbol, arg);
      if (symbol != NULL)
        {
        schemerlicht_set_object(ra, symbol);
        }
      else
        {
        schemerlicht_object key;
        key.type = schemerlicht_object_type_string;
        schemerlicht_string_copy(ctxt, &key.value.s, &arg->value.s);
        schemerlicht_object* new_symbol = schemerlicht_map_insert(ctxt, ctxt->string_to_symbol, &key);
        new_symbol->type = schemerlicht_object_type_symbol;
        schemerlicht_string_copy(ctxt, &new_symbol->value.s, &arg->value.s);
        schemerlicht_set_object(ra, new_symbol);
        }
      }
    else
      {
      schemerlicht_object v;
      v.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &v);
      }
    }
  }
  return;
  case SCHEMERLICHT_SYMBOL_TO_STRING:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_SYMBOL_TO_STRING);
  if (b == 0)
    {
    schemerlicht_object v;
    v.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &v);
    }
  else
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_symbol)
      {
      schemerlicht_object v;
      v.type = schemerlicht_object_type_string;
      schemerlicht_string_copy(ctxt, &v.value.s, &arg->value.s);
      schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
      schemerlicht_set_object(heap_obj, &v);
      ++ctxt->heap_pos;

      schemerlicht_set_object(ra, heap_obj);
      }
    else
      {
      schemerlicht_object v;
      v.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &v);
      }
    }
  }
  return;
  case SCHEMERLICHT_LENGTH:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_LENGTH);
  schemerlicht_object ret;
  if (b == 0)
    {
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    ret.type = schemerlicht_object_type_fixnum;
    schemerlicht_memsize length = 0;
    schemerlicht_object* p = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(p) != schemerlicht_object_type_nil && schemerlicht_object_get_type(p) != schemerlicht_object_type_pair)
      {
      ret.type = schemerlicht_object_type_undefined;
      }
    else
      {
      while (schemerlicht_object_get_type(p) != schemerlicht_object_type_nil)
        {
        ++length;
        p = schemerlicht_vector_at(&p->value.v, 1, schemerlicht_object);
        if (schemerlicht_object_get_type(p) != schemerlicht_object_type_nil && schemerlicht_object_get_type(p) != schemerlicht_object_type_pair)
          {
          ret.type = schemerlicht_object_type_undefined;
          break;
          }
        }
      if (schemerlicht_object_get_type(&ret) == schemerlicht_object_type_fixnum)
        ret.value.fx = length;
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_SET_CAR:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_SET_CAR);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_void;
  if (b > 1)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* value = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_pair)
      {
      schemerlicht_assert(v->value.v.vector_size == 2);
      schemerlicht_object* value_to_change = schemerlicht_vector_at(&v->value.v, 0, schemerlicht_object);
      schemerlicht_set_object(value_to_change, value);
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_SET_CDR:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_SET_CDR);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_void;
  if (b > 1)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* value = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_pair)
      {
      schemerlicht_assert(v->value.v.vector_size == 2);
      schemerlicht_object* value_to_change = schemerlicht_vector_at(&v->value.v, 1, schemerlicht_object);
      schemerlicht_set_object(value_to_change, value);
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_IS_SYMBOL:
  {

  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_SYMBOL);
  schemerlicht_object ret;
  if (b > 0)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_symbol)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    }
  else
    {
    ret.type = schemerlicht_object_type_false;
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_RECLAIM:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_RECLAIM);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_void;
  UNUSED(b);
  UNUSED(c);
  schemerlicht_check_garbage_collection(ctxt);
  schemerlicht_assert(0);
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_RECLAIM_GARBAGE:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_RECLAIM_GARBAGE);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_void;
  UNUSED(b);
  UNUSED(c);
  schemerlicht_collect_garbage(ctxt);
  schemerlicht_assert(0);
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_MEMV:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_MEMV);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_false;
  if (b >= 2)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* lst = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if (schemerlicht_objects_eqv(v, lst))
      {
      ret = *lst;
      }
    else
      {
      while (schemerlicht_object_get_type(lst) == schemerlicht_object_type_pair)
        {
        schemerlicht_object* v0 = schemerlicht_vector_at(&lst->value.v, 0, schemerlicht_object);
        schemerlicht_object* v1 = schemerlicht_vector_at(&lst->value.v, 1, schemerlicht_object);
        if (schemerlicht_objects_eqv(v, v0))
          {
          ret = *lst;
          break;
          }
        lst = v1;
        }
      if (schemerlicht_object_get_type(lst) != schemerlicht_object_type_pair)
        {
        if (schemerlicht_objects_eqv(v, lst))
          ret = *lst;
        }
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_MEMQ:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_MEMQ);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_false;
  if (b >= 2)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* lst = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if (schemerlicht_objects_eq(v, lst))
      {
      ret = *lst;
      }
    else
      {
      while (schemerlicht_object_get_type(lst) == schemerlicht_object_type_pair)
        {
        schemerlicht_object* v0 = schemerlicht_vector_at(&lst->value.v, 0, schemerlicht_object);
        schemerlicht_object* v1 = schemerlicht_vector_at(&lst->value.v, 1, schemerlicht_object);
        if (schemerlicht_objects_eq(v, v0))
          {
          ret = *lst;
          break;
          }
        lst = v1;
        }
      if (schemerlicht_object_get_type(lst) != schemerlicht_object_type_pair)
        {
        if (schemerlicht_objects_eq(v, lst))
          ret = *lst;
        }
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_MEMBER:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_MEMBER);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_false;
  if (b >= 2)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* lst = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if (schemerlicht_objects_equal(ctxt, v, lst))
      {
      ret = *lst;
      }
    else
      {
      while (schemerlicht_object_get_type(lst) == schemerlicht_object_type_pair)
        {
        schemerlicht_object* v0 = schemerlicht_vector_at(&lst->value.v, 0, schemerlicht_object);
        schemerlicht_object* v1 = schemerlicht_vector_at(&lst->value.v, 1, schemerlicht_object);
        if (schemerlicht_objects_equal(ctxt, v, v0))
          {
          ret = *lst;
          break;
          }
        lst = v1;
        }
      if (schemerlicht_object_get_type(lst) != schemerlicht_object_type_pair)
        {
        if (schemerlicht_objects_equal(ctxt, v, lst))
          ret = *lst;
        }
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_ASSV:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_ASSV);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_false;
  if (b >= 2)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* lst = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    while (schemerlicht_object_get_type(lst) == schemerlicht_object_type_pair)
      {
      schemerlicht_object* v0 = schemerlicht_vector_at(&lst->value.v, 0, schemerlicht_object);
      schemerlicht_object* v1 = schemerlicht_vector_at(&lst->value.v, 1, schemerlicht_object);
      if (schemerlicht_object_get_type(v0) == schemerlicht_object_type_pair)
        {
        schemerlicht_object* v00 = schemerlicht_vector_at(&v0->value.v, 0, schemerlicht_object);
        if (schemerlicht_objects_eqv(v, v00))
          {
          ret = *v0;
          break;
          }
        }
      lst = v1;
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_ASSQ:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_ASSQ);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_false;
  if (b >= 2)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* lst = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    while (schemerlicht_object_get_type(lst) == schemerlicht_object_type_pair)
      {
      schemerlicht_object* v0 = schemerlicht_vector_at(&lst->value.v, 0, schemerlicht_object);
      schemerlicht_object* v1 = schemerlicht_vector_at(&lst->value.v, 1, schemerlicht_object);
      if (schemerlicht_object_get_type(v0) == schemerlicht_object_type_pair)
        {
        schemerlicht_object* v00 = schemerlicht_vector_at(&v0->value.v, 0, schemerlicht_object);
        if (schemerlicht_objects_eq(v, v00))
          {
          ret = *v0;
          break;
          }
        }
      lst = v1;
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_ASSOC:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_ASSOC);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_false;
  if (b >= 2)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* lst = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    while (schemerlicht_object_get_type(lst) == schemerlicht_object_type_pair)
      {
      schemerlicht_object* v0 = schemerlicht_vector_at(&lst->value.v, 0, schemerlicht_object);
      schemerlicht_object* v1 = schemerlicht_vector_at(&lst->value.v, 1, schemerlicht_object);
      if (schemerlicht_object_get_type(v0) == schemerlicht_object_type_pair)
        {
        schemerlicht_object* v00 = schemerlicht_vector_at(&v0->value.v, 0, schemerlicht_object);
        if (schemerlicht_objects_equal(ctxt, v, v00))
          {
          ret = *v0;
          break;
          }
        }
      lst = v1;
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_STRING_APPEND:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING_APPEND);
  schemerlicht_object v;
  v.type = schemerlicht_object_type_string;
  schemerlicht_string_init(ctxt, &v.value.s, "");
  for (int i = 0; i < b; ++i)
    {
    schemerlicht_object* rb = schemerlicht_vector_at(&ctxt->stack, a + c + i + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(rb) == schemerlicht_object_type_string)
      {
      schemerlicht_string_append(ctxt, &v.value.s, &rb->value.s);
      }
    }
  schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
  schemerlicht_set_object(heap_obj, &v);
  ++ctxt->heap_pos;
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_STRING_COPY:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING_COPY);

  schemerlicht_object v;
  if (b > 0)
    {
    schemerlicht_object* rb = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(rb) == schemerlicht_object_type_string)
      {
      v.type = schemerlicht_object_type_string;
      schemerlicht_string_copy(ctxt, &v.value.s, &rb->value.s);
      schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
      schemerlicht_set_object(heap_obj, &v);
      ++ctxt->heap_pos;
      }
    else
      {
      v.type = schemerlicht_object_type_undefined;
      }
    }
  else
    {
    v.type = schemerlicht_object_type_undefined;
    }
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_STRING_FILL:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING_FILL);
  schemerlicht_object v;
  if (b < 2)
    {
    v.type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* str = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* chr = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if (schemerlicht_object_get_type(str) == schemerlicht_object_type_string && schemerlicht_object_get_type(chr) == schemerlicht_object_type_char)
      {
      memset(str->value.s.string_ptr, chr->value.ch, str->value.s.string_length);
      v = *str;
      }
    else
      {
      v.type = schemerlicht_object_type_undefined;
      }
    }
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_VECTOR_FILL:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_VECTOR_FILL);
  schemerlicht_object v;
  if (b < 2)
    {
    v.type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* vec = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* obj = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if (schemerlicht_object_get_type(vec) == schemerlicht_object_type_vector)
      {
      schemerlicht_object* it = schemerlicht_vector_begin(&vec->value.v, schemerlicht_object);
      schemerlicht_object* it_end = schemerlicht_vector_end(&vec->value.v, schemerlicht_object);
      for (; it != it_end; ++it)
        {
        *it = *obj;
        }
      v.type = schemerlicht_object_type_void;
      }
    else
      {
      v.type = schemerlicht_object_type_undefined;
      }
    }
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_CURRENT_SECONDS:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CURRENT_SECONDS);
  schemerlicht_object v;
  v.type = schemerlicht_object_type_flonum;
  v.value.fl = cast(schemerlicht_flonum, clock()) / cast(schemerlicht_flonum, CLOCKS_PER_SEC);
  schemerlicht_set_object(ra, &v);
  UNUSED(c);
  UNUSED(b);
  }
  return;
  case SCHEMERLICHT_CURRENT_MILLISECONDS:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CURRENT_MILLISECONDS);
  schemerlicht_object v;
  v.type = schemerlicht_object_type_flonum;
  v.value.fl = cast(schemerlicht_flonum, clock()) * 1000.0 / cast(schemerlicht_flonum, CLOCKS_PER_SEC);
  schemerlicht_set_object(ra, &v);
  UNUSED(c);
  UNUSED(b);
  }
  return;
  case SCHEMERLICHT_IS_LIST:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_LIST);
  schemerlicht_object v;
  v.type = schemerlicht_object_type_false;
  if (b > 0)
    {
    schemerlicht_object* rb = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    while (schemerlicht_object_get_type(rb) == schemerlicht_object_type_pair)
      {
      rb = schemerlicht_vector_at(&rb->value.v, 1, schemerlicht_object);
      }
    if (schemerlicht_object_get_type(rb) == schemerlicht_object_type_nil)
      v.type = schemerlicht_object_type_true;
    }
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_STRING_EQUAL:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING_EQUAL);
  schemerlicht_object v;
  v.type = schemerlicht_object_type_undefined;
  if (b > 1)
    {
    schemerlicht_object* s1 = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* s2 = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if (schemerlicht_object_get_type(s1) == schemerlicht_object_type_string && schemerlicht_object_get_type(s2) == schemerlicht_object_type_string)
      {
      if (strcmp(s1->value.s.string_ptr, s2->value.s.string_ptr) == 0)
        v.type = schemerlicht_object_type_true;
      else
        v.type = schemerlicht_object_type_false;
      }
    }
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_STRING_LESS:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_object v;
  v.type = schemerlicht_object_type_undefined;
  if (b > 1)
    {
    schemerlicht_object* s1 = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* s2 = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if (schemerlicht_object_get_type(s1) == schemerlicht_object_type_string && schemerlicht_object_get_type(s2) == schemerlicht_object_type_string)
      {
      schemerlicht_memsize sz = s1->value.s.string_length;
      if (s2->value.s.string_length < sz)
        sz = s2->value.s.string_length;
      for (schemerlicht_memsize i = 0; i < sz; ++i)
        {
        if (s1->value.s.string_ptr[i] < s2->value.s.string_ptr[i])
          {
          v.type = schemerlicht_object_type_true;
          schemerlicht_set_object(ra, &v);
          return;
          }
        else if (s1->value.s.string_ptr[i] > s2->value.s.string_ptr[i])
          {
          v.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &v);
          return;
          }
        }
      if (s1->value.s.string_length < s2->value.s.string_length)
        v.type = schemerlicht_object_type_true;
      else
        v.type = schemerlicht_object_type_false;
      }
    }
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_STRING_GREATER:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_object v;
  v.type = schemerlicht_object_type_undefined;
  if (b > 1)
    {
    schemerlicht_object* s1 = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* s2 = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if (schemerlicht_object_get_type(s1) == schemerlicht_object_type_string && schemerlicht_object_get_type(s2) == schemerlicht_object_type_string)
      {
      schemerlicht_memsize sz = s1->value.s.string_length;
      if (s2->value.s.string_length < sz)
        sz = s2->value.s.string_length;
      for (schemerlicht_memsize i = 0; i < sz; ++i)
        {
        if (s1->value.s.string_ptr[i] > s2->value.s.string_ptr[i])
          {
          v.type = schemerlicht_object_type_true;
          schemerlicht_set_object(ra, &v);
          return;
          }
        else if (s1->value.s.string_ptr[i] < s2->value.s.string_ptr[i])
          {
          v.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &v);
          return;
          }
        }
      if (s1->value.s.string_length > s2->value.s.string_length)
        v.type = schemerlicht_object_type_true;
      else
        v.type = schemerlicht_object_type_false;
      }
    }
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_STRING_LEQ:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING_LEQ);
  schemerlicht_primitive_string_greater(ctxt, a, b, c);
  if (schemerlicht_object_get_type(ra) == schemerlicht_object_type_true)
    {
    ra->type = schemerlicht_object_type_false;
    }
  else if (schemerlicht_object_get_type(ra) == schemerlicht_object_type_false)
    {
    ra->type = schemerlicht_object_type_true;
    }
  }
  return;
  case SCHEMERLICHT_STRING_GEQ:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING_GEQ);
  schemerlicht_primitive_string_less(ctxt, a, b, c);
  if (schemerlicht_object_get_type(ra) == schemerlicht_object_type_true)
    {
    ra->type = schemerlicht_object_type_false;
    }
  else if (schemerlicht_object_get_type(ra) == schemerlicht_object_type_false)
    {
    ra->type = schemerlicht_object_type_true;
    }
  }
  return;
  case SCHEMERLICHT_STRING_CI_EQUAL:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING_CI_EQUAL);
  schemerlicht_object v;
  v.type = schemerlicht_object_type_undefined;
  if (b > 1)
    {
    schemerlicht_object* s1 = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* s2 = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if (schemerlicht_object_get_type(s1) == schemerlicht_object_type_string && schemerlicht_object_get_type(s2) == schemerlicht_object_type_string)
      {
      if (s1->value.s.string_length != s2->value.s.string_length)
        v.type = schemerlicht_object_type_false;
      else
        {
        const schemerlicht_memsize sz = s1->value.s.string_length;
        for (schemerlicht_memsize i = 0; i < sz; ++i)
          {
          if (to_lower(s1->value.s.string_ptr[i]) != to_lower(s2->value.s.string_ptr[i]))
            {
            v.type = schemerlicht_object_type_false;
            schemerlicht_set_object(ra, &v);
            return;
            }
          }
        v.type = schemerlicht_object_type_true;
        }
      }
    }
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_STRING_CI_LESS:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_object v;
  v.type = schemerlicht_object_type_undefined;
  if (b > 1)
    {
    schemerlicht_object* s1 = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* s2 = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if (schemerlicht_object_get_type(s1) == schemerlicht_object_type_string && schemerlicht_object_get_type(s2) == schemerlicht_object_type_string)
      {
      schemerlicht_memsize sz = s1->value.s.string_length;
      if (s2->value.s.string_length < sz)
        sz = s2->value.s.string_length;
      for (schemerlicht_memsize i = 0; i < sz; ++i)
        {
        if (to_lower(s1->value.s.string_ptr[i]) < to_lower(s2->value.s.string_ptr[i]))
          {
          v.type = schemerlicht_object_type_true;
          schemerlicht_set_object(ra, &v);
          return;
          }
        else if (to_lower(s1->value.s.string_ptr[i]) > to_lower(s2->value.s.string_ptr[i]))
          {
          v.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &v);
          return;
          }
        }
      if (s1->value.s.string_length < s2->value.s.string_length)
        v.type = schemerlicht_object_type_true;
      else
        v.type = schemerlicht_object_type_false;
      }
    }
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_STRING_CI_GREATER:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_object v;
  v.type = schemerlicht_object_type_undefined;
  if (b > 1)
    {
    schemerlicht_object* s1 = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* s2 = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if (schemerlicht_object_get_type(s1) == schemerlicht_object_type_string && schemerlicht_object_get_type(s2) == schemerlicht_object_type_string)
      {
      schemerlicht_memsize sz = s1->value.s.string_length;
      if (s2->value.s.string_length < sz)
        sz = s2->value.s.string_length;
      for (schemerlicht_memsize i = 0; i < sz; ++i)
        {
        if (to_lower(s1->value.s.string_ptr[i]) > to_lower(s2->value.s.string_ptr[i]))
          {
          v.type = schemerlicht_object_type_true;
          schemerlicht_set_object(ra, &v);
          return;
          }
        else if (to_lower(s1->value.s.string_ptr[i]) < to_lower(s2->value.s.string_ptr[i]))
          {
          v.type = schemerlicht_object_type_false;
          schemerlicht_set_object(ra, &v);
          return;
          }
        }
      if (s1->value.s.string_length > s2->value.s.string_length)
        v.type = schemerlicht_object_type_true;
      else
        v.type = schemerlicht_object_type_false;
      }
    }
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_STRING_CI_LEQ:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING_CI_LEQ);
  schemerlicht_primitive_string_ci_greater(ctxt, a, b, c);
  if (schemerlicht_object_get_type(ra) == schemerlicht_object_type_true)
    {
    ra->type = schemerlicht_object_type_false;
    }
  else if (schemerlicht_object_get_type(ra) == schemerlicht_object_type_false)
    {
    ra->type = schemerlicht_object_type_true;
    }
  }
  return;
  case SCHEMERLICHT_STRING_CI_GEQ:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING_CI_GEQ);
  schemerlicht_primitive_string_ci_less(ctxt, a, b, c);
  if (schemerlicht_object_get_type(ra) == schemerlicht_object_type_true)
    {
    ra->type = schemerlicht_object_type_false;
    }
  else if (schemerlicht_object_get_type(ra) == schemerlicht_object_type_false)
    {
    ra->type = schemerlicht_object_type_true;
    }
  }
  return;
  case SCHEMERLICHT_SUBSTRING:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_SUBSTRING);
  schemerlicht_object v;
  v.type = schemerlicht_object_type_undefined;
  if (b > 2)
    {
    schemerlicht_object* str = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* from = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    schemerlicht_object* to = schemerlicht_vector_at(&ctxt->stack, a + c + 3, schemerlicht_object);
    if (schemerlicht_object_get_type(str) == schemerlicht_object_type_string && schemerlicht_object_get_type(from) == schemerlicht_object_type_fixnum && schemerlicht_object_get_type(to) == schemerlicht_object_type_fixnum)
      {
      if (from->value.fx >= 0 && from->value.fx <= to->value.fx)
        {
        const schemerlicht_memsize f = cast(schemerlicht_memsize, from->value.fx);
        schemerlicht_memsize t = cast(schemerlicht_memsize, to->value.fx);
        if (t > str->value.s.string_length)
          t = str->value.s.string_length;
        v.type = schemerlicht_object_type_string;
        schemerlicht_string_init_ranged(ctxt, &v.value.s, str->value.s.string_ptr + f, str->value.s.string_ptr + t);
        schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
        schemerlicht_set_object(heap_obj, &v);
        ++ctxt->heap_pos;
        }
      }
    }
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_MAX:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_MAX);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    int type = schemerlicht_object_type_char;
    for (int j = 0; j < b; ++j)
      {
      schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
      if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_fixnum && schemerlicht_object_get_type(arg) != schemerlicht_object_type_flonum && schemerlicht_object_get_type(arg) != schemerlicht_object_type_char)
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }
      if (type < schemerlicht_object_get_type(arg))
        type = schemerlicht_object_get_type(arg);
      }
    schemerlicht_object ret;
    ret.type = type;
    ret.value.fx = 0;
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    switch (type)
      {
      case schemerlicht_object_type_flonum:
      {
      switch (schemerlicht_object_get_type(first_arg))
        {
        case schemerlicht_object_type_flonum:
        {
        ret.value.fl = first_arg->value.fl;
        break;
        }
        case schemerlicht_object_type_fixnum:
        {
        ret.value.fl = cast(schemerlicht_flonum, first_arg->value.fx);
        break;
        }
        case schemerlicht_object_type_char:
        {
        ret.value.fl = cast(schemerlicht_flonum, first_arg->value.ch);
        break;
        }
        }
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        switch (schemerlicht_object_get_type(arg))
          {
          case schemerlicht_object_type_flonum:
          {
          if (arg->value.fl > ret.value.fl)
            ret.value.fl = arg->value.fl;
          break;
          }
          case schemerlicht_object_type_fixnum:
          {
          if (cast(schemerlicht_flonum, arg->value.fx) > ret.value.fl)
            ret.value.fl = cast(schemerlicht_flonum, arg->value.fx);
          break;
          }
          case schemerlicht_object_type_char:
          {
          if (cast(schemerlicht_flonum, arg->value.ch) > ret.value.fl)
            ret.value.fl = cast(schemerlicht_flonum, arg->value.ch);
          break;
          }
          }
        }
      break;
      }
      case schemerlicht_object_type_fixnum:
      {
      switch (schemerlicht_object_get_type(first_arg))
        {
        case schemerlicht_object_type_fixnum:
        {
        ret.value.fx = first_arg->value.fx;
        break;
        }
        case schemerlicht_object_type_char:
        {
        ret.value.fx = cast(schemerlicht_fixnum, first_arg->value.ch);
        break;
        }
        }
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        switch (schemerlicht_object_get_type(arg))
          {
          case schemerlicht_object_type_fixnum:
          {
          if (arg->value.fx > ret.value.fx)
            ret.value.fx = arg->value.fx;
          break;
          }
          case schemerlicht_object_type_char:
          {
          if (cast(schemerlicht_fixnum, arg->value.ch) > ret.value.fl)
            ret.value.fx = cast(schemerlicht_fixnum, arg->value.ch);
          break;
          }
          }
        }
      break;
      }
      case schemerlicht_object_type_char:
      {
      ret.value.ch = first_arg->value.ch;
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        if (arg->value.ch > ret.value.ch)
          ret.value.ch = arg->value.ch;
        }
      break;
      }
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_MIN:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_MIN);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    int type = schemerlicht_object_type_char;
    for (int j = 0; j < b; ++j)
      {
      schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
      if (schemerlicht_object_get_type(arg) != schemerlicht_object_type_fixnum && schemerlicht_object_get_type(arg) != schemerlicht_object_type_flonum && schemerlicht_object_get_type(arg) != schemerlicht_object_type_char)
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_set_object(ra, &ret);
        return;
        }
      if (type < schemerlicht_object_get_type(arg))
        type = schemerlicht_object_get_type(arg);
      }
    schemerlicht_object ret;
    ret.type = type;
    ret.value.fx = 0;
    schemerlicht_object* first_arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    switch (type)
      {
      case schemerlicht_object_type_flonum:
      {
      switch (schemerlicht_object_get_type(first_arg))
        {
        case schemerlicht_object_type_flonum:
        {
        ret.value.fl = first_arg->value.fl;
        break;
        }
        case schemerlicht_object_type_fixnum:
        {
        ret.value.fl = cast(schemerlicht_flonum, first_arg->value.fx);
        break;
        }
        case schemerlicht_object_type_char:
        {
        ret.value.fl = cast(schemerlicht_flonum, first_arg->value.ch);
        break;
        }
        }
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        switch (schemerlicht_object_get_type(arg))
          {
          case schemerlicht_object_type_flonum:
          {
          if (arg->value.fl < ret.value.fl)
            ret.value.fl = arg->value.fl;
          break;
          }
          case schemerlicht_object_type_fixnum:
          {
          if (cast(schemerlicht_flonum, arg->value.fx) < ret.value.fl)
            ret.value.fl = cast(schemerlicht_flonum, arg->value.fx);
          break;
          }
          case schemerlicht_object_type_char:
          {
          if (cast(schemerlicht_flonum, arg->value.ch) < ret.value.fl)
            ret.value.fl = cast(schemerlicht_flonum, arg->value.ch);
          break;
          }
          }
        }
      break;
      }
      case schemerlicht_object_type_fixnum:
      {
      switch (schemerlicht_object_get_type(first_arg))
        {
        case schemerlicht_object_type_fixnum:
        {
        ret.value.fx = first_arg->value.fx;
        break;
        }
        case schemerlicht_object_type_char:
        {
        ret.value.fx = cast(schemerlicht_fixnum, first_arg->value.ch);
        break;
        }
        }
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        switch (schemerlicht_object_get_type(arg))
          {
          case schemerlicht_object_type_fixnum:
          {
          if (arg->value.fx < ret.value.fx)
            ret.value.fx = arg->value.fx;
          break;
          }
          case schemerlicht_object_type_char:
          {
          if (cast(schemerlicht_fixnum, arg->value.ch) < ret.value.fl)
            ret.value.fx = cast(schemerlicht_fixnum, arg->value.ch);
          break;
          }
          }
        }
      break;
      }
      case schemerlicht_object_type_char:
      {
      ret.value.ch = first_arg->value.ch;
      for (int j = 1; j < b; ++j)
        {
        schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + j + c, schemerlicht_object);
        if (arg->value.ch < ret.value.ch)
          ret.value.ch = arg->value.ch;
        }
      break;
      }
      }
    schemerlicht_set_object(ra, &ret);
    }
  }
  return;
  case SCHEMERLICHT_APPLY:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_APPLY);

  if (b > 1)
    {
    schemerlicht_object* last_arg = schemerlicht_vector_at(&ctxt->stack, a + c + b, schemerlicht_object);
    if (schemerlicht_object_get_type(last_arg) != schemerlicht_object_type_pair && schemerlicht_object_get_type(last_arg) != schemerlicht_object_type_nil)
      {
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_INVALID_ARGUMENT, -1, -1, "last argument of apply should be a list.");
      ra->type = schemerlicht_object_type_undefined;
      return;
      }
    --b;
    while (schemerlicht_object_get_type(last_arg) == schemerlicht_object_type_pair)
      {
      if (a + c + b + 1 >= cast(int, ctxt->stack.vector_size))
        {
        schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_MEMORY, -1, -1, "stack overflow in apply.");
        ra->type = schemerlicht_object_type_undefined;
        return;
        }
      schemerlicht_object* v0 = schemerlicht_vector_at(&last_arg->value.v, 0, schemerlicht_object);
      schemerlicht_object* v1 = schemerlicht_vector_at(&last_arg->value.v, 1, schemerlicht_object);
      ++b;
      schemerlicht_object* stack_pos = schemerlicht_vector_at(&ctxt->stack, a + c + b, schemerlicht_object);
      //intptr_t address = (intptr_t)stack_pos->value.v.vector_ptr;
      //printf("overriding: %x\n", address);

      *stack_pos = *v0;
      last_arg = v1;
      }
    //schemerlicht_vector_at(&ctxt->stack, a + c + b + 1, schemerlicht_object)->type = schemerlicht_object_type_blocking;

    //stack situation so far:
    // a: prim call apply
    // a + c + 1: operator arg
    // a + c + 2: first arg for op
    // a + c + 3: second arg for op
    // ...
    // a + c + b: last arg

    schemerlicht_object* op = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(op) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(op) == schemerlicht_object_type_primitive_object)
      {
      if (op->value.fx == SCHEMERLICHT_APPLY)
        {
        //stack situation so far:
        // a == 0, c == 1
        // a: prim call apply
        // a + c: continuation
        // a + c + 1: operator arg == apply
        // a + c + 2: first arg for op
        // a + c + 3: second arg for op
        // ...
        // a + c + b: last arg
        // move down 
        for (int i = 0; i < b - 1; ++i)
          {
          schemerlicht_object* ri = schemerlicht_vector_at(&ctxt->stack, a + c + i + 1, schemerlicht_object);
          schemerlicht_object* ri_next = schemerlicht_vector_at(&ctxt->stack, a + c + i + 2, schemerlicht_object);
          *ri = *ri_next;
          }
        schemerlicht_vector_at(&ctxt->stack, a + c + b, schemerlicht_object)->type = schemerlicht_object_type_blocking; // Very important! variable arity lambdas should know till where the list goes
        schemerlicht_call_primitive(ctxt, SCHEMERLICHT_APPLY, 0, b - 1, 1);
        }
      else
        {
        schemerlicht_call_primitive(ctxt, op->value.fx, a + c + 1, b - 1, 0);
        schemerlicht_set_object(ra, op);
        }
      }
    else if (schemerlicht_object_get_type(op) == schemerlicht_object_type_closure)
      {
      schemerlicht_assert(a == 0); // by construction apply is always represented as a funcall. Because of cps construction it means that all registers are available
      schemerlicht_assert(c == 1); // as apply is represented as object, it means that c == 1 because the vm wants to skip the continuation when calling the primitive apply.
      schemerlicht_object* continuation = schemerlicht_vector_at(&ctxt->stack, a + 1, schemerlicht_object); // save the original closure
      schemerlicht_object original_continuation = *continuation;
      schemerlicht_vector_push_back(ctxt, &ctxt->gc_save_list, *continuation, schemerlicht_object);
      schemerlicht_object oper = *op;


      //swap place of continuation and operator
      *op = ctxt->empty_continuation;
      *continuation = oper;

      // stack state (with guaranteed a == 0):
      // a + 1 : operator closure
      // a + 2 : dummy continuation
      // a + 3 : first arg for operator
      // a + 4 : second arg for operator
      // ...
      // a + 1 + b : last arg for operator

      // move down 
      for (int i = 0; i < b + 1; ++i)
        {
        schemerlicht_object* ri = schemerlicht_vector_at(&ctxt->stack, i, schemerlicht_object);
        schemerlicht_object* ri_next = schemerlicht_vector_at(&ctxt->stack, i + 1, schemerlicht_object);
        *ri = *ri_next;
        }
      schemerlicht_vector_at(&ctxt->stack, b + 1, schemerlicht_object)->type = schemerlicht_object_type_blocking; // Very important! variable arity lambdas should know till where the list goes

      schemerlicht_assert(oper.type == schemerlicht_object_type_closure);
      schemerlicht_object* lambda_obj = schemerlicht_vector_at(&oper.value.v, 0, schemerlicht_object);
      schemerlicht_assert(schemerlicht_object_get_type(lambda_obj) == schemerlicht_object_type_lambda);
      schemerlicht_function* lambda = cast(schemerlicht_function*, lambda_obj->value.ptr);
      schemerlicht_run(ctxt, lambda);

      schemerlicht_object ret = *schemerlicht_vector_at(&ctxt->stack, 1, schemerlicht_object); // return value is at position 1, as our fake continuation lambda is simply empty, which means: R0 == lambda itself, R1 == first lambda arg (which is return value)
      schemerlicht_set_object(ra, &ret);
      *continuation = original_continuation;
      schemerlicht_vector_pop_back(&ctxt->gc_save_list);
      }
    else if (schemerlicht_object_get_type(op) == schemerlicht_object_type_lambda)
      {
      schemerlicht_assert(a == 0); // by construction apply is always represented as a funcall. Because of cps construction it means that all registers are available
      schemerlicht_assert(c == 1); // as apply is represented as object, it means that c == 1 because the vm wants to skip the continuation when calling the primitive apply.
      schemerlicht_object* continuation = schemerlicht_vector_at(&ctxt->stack, a + 1, schemerlicht_object); // save the original closure
      schemerlicht_object original_continuation = *continuation;
      schemerlicht_vector_push_back(ctxt, &ctxt->gc_save_list, *continuation, schemerlicht_object);
      /*
      int cnt = 0;
      int found_block = 0;
      while (found_block == 0)
        {
        schemerlicht_object* stack_item = schemerlicht_vector_at(&ctxt->stack, a + 2 + cnt, schemerlicht_object);
        if (schemerlicht_object_get_type(stack_item) == schemerlicht_object_type_blocking)
          {
          found_block = 1;
          }
        else
          {
          ++cnt;
          schemerlicht_vector_push_back(ctxt, &ctxt->gcsave_list, *stack_item, schemerlicht_object);
          }
        }
        */
      schemerlicht_object oper = *op;

      //swap place of continuation and operator
      *op = ctxt->empty_continuation;
      *continuation = oper;

      // stack state (with guaranteed a == 0):
      // a + 1 : operator closure
      // a + 2 : dummy continuation
      // a + 3 : first arg for operator
      // a + 4 : second arg for operator
      // ...
      // a + 1 + b : last arg for operator

      // move down 
      for (int i = 0; i < b + 1; ++i)
        {
        schemerlicht_object* ri = schemerlicht_vector_at(&ctxt->stack, i, schemerlicht_object);
        schemerlicht_object* ri_next = schemerlicht_vector_at(&ctxt->stack, i + 1, schemerlicht_object);
        *ri = *ri_next;
        }
      schemerlicht_vector_at(&ctxt->stack, b + 1, schemerlicht_object)->type = schemerlicht_object_type_blocking; // Very important! variable arity lambdas should know till where the list goes
      schemerlicht_assert(oper.type == schemerlicht_object_type_lambda);
      schemerlicht_function* lambda = cast(schemerlicht_function*, oper.value.ptr);
      schemerlicht_run(ctxt, lambda);

      schemerlicht_object* ret = schemerlicht_vector_at(&ctxt->stack, 1, schemerlicht_object); // return value is at position 1, as our fake continuation lambda is simply empty, which means: R0 == lambda itself, R1 == first lambda arg (which is return value)
      schemerlicht_set_object(ra, ret);
      *continuation = original_continuation;
      /*
      for (int i = 0; i < cnt; ++i)
        {
        schemerlicht_object* stack_item = schemerlicht_vector_back(&ctxt->gcsave_list, schemerlicht_object);
        schemerlicht_set_object(schemerlicht_vector_at(&ctxt->stack, a + 2 + (cnt-i-1), schemerlicht_object), stack_item);
        schemerlicht_vector_pop_back(&ctxt->gcsave_list);
        }
      */
      schemerlicht_vector_pop_back(&ctxt->gc_save_list);
      //schemerlicht_object* lam = schemerlicht_vector_begin(&continuation->value.v, schemerlicht_object);
      //schemerlicht_assert(schemerlicht_object_get_type(lam) == schemerlicht_object_type_lambda);
      //schemerlicht_assert(((schemerlicht_function*)lam->value.ptr)->function_definition.string_length < 1024);
      }
    else
      {
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_INVALID_ARGUMENT, -1, -1, "attempt to use apply with non-procedure.");
      ra->type = schemerlicht_object_type_undefined;
      }
    }
  else
    {
    ra->type = schemerlicht_object_type_undefined;
    }
  }
  return;
  case SCHEMERLICHT_APPEND:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_APPEND);
  if (b == 0)
    {
    ra->type = schemerlicht_object_type_nil;
    }
  else
    {
    schemerlicht_object* last_list_obj = ra;
    last_list_obj->type = schemerlicht_object_type_nil;
    for (int i = 0; i < b; ++i)
      {
      schemerlicht_object* current_list = schemerlicht_vector_at(&ctxt->stack, a + c + 1 + i, schemerlicht_object);
      if (schemerlicht_object_get_type(current_list) != schemerlicht_object_type_pair && schemerlicht_object_get_type(current_list) != schemerlicht_object_type_nil)
        {
        if (i == (b - 1))
          {
          *last_list_obj = *current_list;
          }
        else
          {
          schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_INVALID_ARGUMENT, -1, -1, "non list object as argument to append");
          break;
          }
        }
      while (schemerlicht_object_get_type(current_list) == schemerlicht_object_type_pair)
        {
        schemerlicht_object* v0 = schemerlicht_vector_at(&current_list->value.v, 0, schemerlicht_object);
        schemerlicht_object* v1 = schemerlicht_vector_at(&current_list->value.v, 1, schemerlicht_object);
        *last_list_obj = make_schemerlicht_object_pair(ctxt);
        schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
        ++ctxt->heap_pos;
        schemerlicht_set_object(heap_obj, last_list_obj);
        *schemerlicht_vector_at(&last_list_obj->value.v, 0, schemerlicht_object) = *v0;
        last_list_obj = schemerlicht_vector_at(&last_list_obj->value.v, 1, schemerlicht_object);
        last_list_obj->type = schemerlicht_object_type_nil;
        current_list = v1;
        if (i == (b - 1)) // last object to append does not need to be a list
          {
          if (schemerlicht_object_get_type(v1) != schemerlicht_object_type_pair)
            {
            schemerlicht_set_object(last_list_obj, v1);
            }
          }
        }
      }
    }
  }
  return;
  case SCHEMERLICHT_IS_EXACT:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_EXACT);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_false;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_fixnum)
      {
      obj.type = schemerlicht_object_type_true;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_IS_INEXACT:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_INEXACT);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_false;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_flonum)
      {
      obj.type = schemerlicht_object_type_true;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_IS_NUMBER:
  {  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_NUMBER);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_false;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg) == schemerlicht_object_type_flonum)
      {
      obj.type = schemerlicht_object_type_true;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_IS_RATIONAL:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_RATIONAL);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_false;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_fixnum)
      {
      obj.type = schemerlicht_object_type_true;
      }
    else if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_flonum)
      {
      if ((arg->value.fl == arg->value.fl) && isfinite(arg->value.fl))
        obj.type = schemerlicht_object_type_true;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_IS_POSITIVE:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_POSITIVE);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_false;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        if (arg->value.fx > 0)
          obj.type = schemerlicht_object_type_true;
        break;
      case schemerlicht_object_type_flonum:
        if (arg->value.fl > 0)
          obj.type = schemerlicht_object_type_true;
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_IS_NEGATIVE:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_NEGATIVE);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_false;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        if (arg->value.fx < 0)
          obj.type = schemerlicht_object_type_true;
        break;
      case schemerlicht_object_type_flonum:
        if (arg->value.fl < 0)
          obj.type = schemerlicht_object_type_true;
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_IS_ODD:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_ODD);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_false;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        if ((arg->value.fx % 2) != 0)
          obj.type = schemerlicht_object_type_true;
        break;
      case schemerlicht_object_type_flonum:
      {
      schemerlicht_fixnum fx = cast(schemerlicht_fixnum, arg->value.fl);
      if ((arg->value.fl == cast(schemerlicht_flonum, fx)) && ((arg->value.fx % 2) != 0))
        obj.type = schemerlicht_object_type_true;
      break;
      }
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_IS_EVEN:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_EVEN);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_false;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        if ((arg->value.fx % 2) == 0)
          obj.type = schemerlicht_object_type_true;
        break;
      case schemerlicht_object_type_flonum:
      {
      schemerlicht_fixnum fx = cast(schemerlicht_fixnum, arg->value.fl);
      if ((arg->value.fl == cast(schemerlicht_flonum, fx)) && ((arg->value.fx % 2) == 0))
        obj.type = schemerlicht_object_type_true;
      break;
      }
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_IS_COMPLEX:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_COMPLEX);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_false;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg) == schemerlicht_object_type_flonum)
      {
      obj.type = schemerlicht_object_type_true;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_IS_REAL:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_REAL);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_false;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg) == schemerlicht_object_type_flonum)
      {
      obj.type = schemerlicht_object_type_true;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_IS_INTEGER:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_INTEGER);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_false;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_true;
        break;
      case schemerlicht_object_type_flonum:
      {
      schemerlicht_fixnum fx = cast(schemerlicht_fixnum, arg->value.fl);
      if (arg->value.fl == cast(schemerlicht_flonum, fx))
        obj.type = schemerlicht_object_type_true;
      break;
      }
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_ABS:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_ABS);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_fixnum;
        obj.value.fx = arg->value.fx < 0 ? -arg->value.fx : arg->value.fx;
        break;
      case schemerlicht_object_type_flonum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = arg->value.fl < 0 ? -arg->value.fl : arg->value.fl;
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_QUOTIENT:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_QUOTIENT);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 1)
    {
    schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* arg2 = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if ((schemerlicht_object_get_type(arg1) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg1) == schemerlicht_object_type_flonum) && (schemerlicht_object_get_type(arg2) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg2) == schemerlicht_object_type_flonum))
      {
      schemerlicht_fixnum fx1 = arg1->value.fx;
      schemerlicht_fixnum fx2 = arg2->value.fx;
      if (schemerlicht_object_get_type(arg1) == schemerlicht_object_type_flonum)
        fx1 = cast(schemerlicht_fixnum, arg1->value.fl);
      if (schemerlicht_object_get_type(arg2) == schemerlicht_object_type_flonum)
        fx2 = cast(schemerlicht_fixnum, arg2->value.fl);
      if (fx2 != 0)
        {
        obj.type = schemerlicht_object_type_fixnum;
        obj.value.fx = fx1 / fx2;
        }
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_REMAINDER:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_REMAINDER);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 1)
    {
    schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* arg2 = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if ((schemerlicht_object_get_type(arg1) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg1) == schemerlicht_object_type_flonum) && (schemerlicht_object_get_type(arg2) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg2) == schemerlicht_object_type_flonum))
      {
      schemerlicht_fixnum fx1 = arg1->value.fx;
      schemerlicht_fixnum fx2 = arg2->value.fx;
      if (schemerlicht_object_get_type(arg1) == schemerlicht_object_type_flonum)
        fx1 = cast(schemerlicht_fixnum, arg1->value.fl);
      if (schemerlicht_object_get_type(arg2) == schemerlicht_object_type_flonum)
        fx2 = cast(schemerlicht_fixnum, arg2->value.fl);
      if (fx2 != 0)
        {
        obj.type = schemerlicht_object_type_fixnum;
        obj.value.fx = fx1 % fx2;
        }
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_MODULO:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_MODULO);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 1)
    {
    schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* arg2 = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if ((schemerlicht_object_get_type(arg1) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg1) == schemerlicht_object_type_flonum) && (schemerlicht_object_get_type(arg2) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg2) == schemerlicht_object_type_flonum))
      {
      schemerlicht_fixnum fx1 = arg1->value.fx;
      schemerlicht_fixnum fx2 = arg2->value.fx;
      if (schemerlicht_object_get_type(arg1) == schemerlicht_object_type_flonum)
        fx1 = cast(schemerlicht_fixnum, arg1->value.fl);
      if (schemerlicht_object_get_type(arg2) == schemerlicht_object_type_flonum)
        fx2 = cast(schemerlicht_fixnum, arg2->value.fl);
      if (fx2 != 0)
        {
        obj.type = schemerlicht_object_type_fixnum;
        obj.value.fx = fx1 % fx2;
        if ((obj.value.fx < 0 && fx2 > 0) || (obj.value.fx > 0 && fx2 < 0))
          obj.value.fx += fx2;
        }
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_GCD:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_GCD);
  if (b == 0)
    {
    schemerlicht_object obj;
    obj.type = schemerlicht_object_type_fixnum;
    obj.value.fx = 0;
    schemerlicht_set_object(ra, &obj);
    }
  else if (b == 1)
    {
    schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(arg1) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg1) == schemerlicht_object_type_flonum)
      {
      schemerlicht_set_object(ra, arg1);
      }
    else
      {
      schemerlicht_object obj;
      obj.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &obj);
      }
    }
  else
    {
    schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* arg2 = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if ((schemerlicht_object_get_type(arg1) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg1) == schemerlicht_object_type_flonum) && (schemerlicht_object_get_type(arg2) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg2) == schemerlicht_object_type_flonum))
      {
      schemerlicht_fixnum fx1 = arg1->value.fx;
      schemerlicht_fixnum fx2 = arg2->value.fx;
      if (schemerlicht_object_get_type(arg1) == schemerlicht_object_type_flonum)
        fx1 = cast(schemerlicht_fixnum, arg1->value.fl);
      if (schemerlicht_object_get_type(arg2) == schemerlicht_object_type_flonum)
        fx2 = cast(schemerlicht_fixnum, arg2->value.fl);
      schemerlicht_object obj;
      obj.type = schemerlicht_object_type_fixnum;
      obj.value.fx = gcd(fx1, fx2);
      for (int i = 2; i < b; ++i)
        {
        schemerlicht_object* argi = schemerlicht_vector_at(&ctxt->stack, a + c + 1 + i, schemerlicht_object);
        if (schemerlicht_object_get_type(argi) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(argi) == schemerlicht_object_type_flonum)
          {
          schemerlicht_fixnum fxi = argi->value.fx;
          if (schemerlicht_object_get_type(argi) == schemerlicht_object_type_flonum)
            fxi = cast(schemerlicht_fixnum, argi->value.fl);
          obj.value.fx = gcd(obj.value.fx, fxi);
          }
        }
      schemerlicht_set_object(ra, &obj);
      }
    else
      {
      schemerlicht_object obj;
      obj.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &obj);
      }
    }
  }
  return;
  case SCHEMERLICHT_LCM:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_LCM);
  if (b == 0)
    {
    schemerlicht_object obj;
    obj.type = schemerlicht_object_type_fixnum;
    obj.value.fx = 1;
    schemerlicht_set_object(ra, &obj);
    }
  else if (b == 1)
    {
    schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(arg1) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg1) == schemerlicht_object_type_flonum)
      {
      schemerlicht_set_object(ra, arg1);
      }
    else
      {
      schemerlicht_object obj;
      obj.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &obj);
      }
    }
  else
    {
    schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* arg2 = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if ((schemerlicht_object_get_type(arg1) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg1) == schemerlicht_object_type_flonum) && (schemerlicht_object_get_type(arg2) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg2) == schemerlicht_object_type_flonum))
      {
      schemerlicht_fixnum fx1 = arg1->value.fx;
      schemerlicht_fixnum fx2 = arg2->value.fx;
      if (schemerlicht_object_get_type(arg1) == schemerlicht_object_type_flonum)
        fx1 = cast(schemerlicht_fixnum, arg1->value.fl);
      if (schemerlicht_object_get_type(arg2) == schemerlicht_object_type_flonum)
        fx2 = cast(schemerlicht_fixnum, arg2->value.fl);
      schemerlicht_object obj;
      obj.type = schemerlicht_object_type_fixnum;
      obj.value.fx = lcm(fx1, fx2);
      for (int i = 2; i < b; ++i)
        {
        schemerlicht_object* argi = schemerlicht_vector_at(&ctxt->stack, a + c + 1 + i, schemerlicht_object);
        if (schemerlicht_object_get_type(argi) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(argi) == schemerlicht_object_type_flonum)
          {
          schemerlicht_fixnum fxi = argi->value.fx;
          if (schemerlicht_object_get_type(argi) == schemerlicht_object_type_flonum)
            fxi = cast(schemerlicht_fixnum, argi->value.fl);
          obj.value.fx = lcm(obj.value.fx, fxi);
          }
        }
      schemerlicht_set_object(ra, &obj);
      }
    else
      {
      schemerlicht_object obj;
      obj.type = schemerlicht_object_type_undefined;
      schemerlicht_set_object(ra, &obj);
      }
    }
  }
  return;
  case SCHEMERLICHT_FLOOR:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FLOOR);

  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_fixnum;
        obj.value.fx = arg->value.fx;
        break;
      case schemerlicht_object_type_flonum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = floor(arg->value.fl);
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_CEILING:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CEILING);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_fixnum;
        obj.value.fx = arg->value.fx;
        break;
      case schemerlicht_object_type_flonum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = ceil(arg->value.fl);
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_TRUNCATE:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_TRUNCATE);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_fixnum;
        obj.value.fx = arg->value.fx;
        break;
      case schemerlicht_object_type_flonum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = trunc(arg->value.fl);
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_ROUND:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_ROUND);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_fixnum;
        obj.value.fx = arg->value.fx;
        break;
      case schemerlicht_object_type_flonum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = round(arg->value.fl);
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_EXP:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_EXP);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = exp(cast(schemerlicht_flonum, arg->value.fx));
        break;
      case schemerlicht_object_type_flonum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = exp(arg->value.fl);
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_EXPT:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_EXPT);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 1)
    {
    schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* arg2 = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if (schemerlicht_object_get_type(arg1) == schemerlicht_object_type_fixnum && schemerlicht_object_get_type(arg2) == schemerlicht_object_type_fixnum)
      {
      obj.type = schemerlicht_object_type_fixnum;
      obj.value.fx = ipow(arg1->value.fx, arg2->value.fx);
      }
    else if ((schemerlicht_object_get_type(arg1) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg1) == schemerlicht_object_type_flonum) && (schemerlicht_object_get_type(arg2) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg2) == schemerlicht_object_type_flonum))
      {
      schemerlicht_flonum fl1 = arg1->value.fl;
      schemerlicht_flonum fl2 = arg2->value.fl;
      if (schemerlicht_object_get_type(arg1) == schemerlicht_object_type_fixnum)
        fl1 = cast(schemerlicht_flonum, arg1->value.fx);
      if (schemerlicht_object_get_type(arg2) == schemerlicht_object_type_fixnum)
        fl2 = cast(schemerlicht_flonum, arg2->value.fx);
      obj.type = schemerlicht_object_type_flonum;
      obj.value.fl = pow(fl1, fl2);
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_LOG:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_LOG);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = log(cast(schemerlicht_flonum, arg->value.fx));
        break;
      case schemerlicht_object_type_flonum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = log(arg->value.fl);
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_SIN:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_SIN);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = sin(cast(schemerlicht_flonum, arg->value.fx));
        break;
      case schemerlicht_object_type_flonum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = sin(arg->value.fl);
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_COS:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_COS);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = cos(cast(schemerlicht_flonum, arg->value.fx));
        break;
      case schemerlicht_object_type_flonum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = cos(arg->value.fl);
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_TAN:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_TAN);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = tan(cast(schemerlicht_flonum, arg->value.fx));
        break;
      case schemerlicht_object_type_flonum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = tan(arg->value.fl);
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_ASIN:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_ASIN);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = asin(cast(schemerlicht_flonum, arg->value.fx));
        break;
      case schemerlicht_object_type_flonum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = asin(arg->value.fl);
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_ACOS:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_ACOS);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = acos(cast(schemerlicht_flonum, arg->value.fx));
        break;
      case schemerlicht_object_type_flonum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = acos(arg->value.fl);
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_ATAN:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_ATAN);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b == 1)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = atan(cast(schemerlicht_flonum, arg->value.fx));
        break;
      case schemerlicht_object_type_flonum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = atan(arg->value.fl);
        break;
      default:
        break;
      }
    }
  else
    {
    schemerlicht_object* arg1 = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    schemerlicht_object* arg2 = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
    if ((schemerlicht_object_get_type(arg1) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg1) == schemerlicht_object_type_flonum) && (schemerlicht_object_get_type(arg2) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg2) == schemerlicht_object_type_flonum))
      {
      schemerlicht_flonum fl1 = arg1->value.fl;
      schemerlicht_flonum fl2 = arg2->value.fl;
      if (schemerlicht_object_get_type(arg1) == schemerlicht_object_type_fixnum)
        fl1 = cast(schemerlicht_flonum, arg1->value.fx);
      if (schemerlicht_object_get_type(arg2) == schemerlicht_object_type_fixnum)
        fl2 = cast(schemerlicht_flonum, arg2->value.fx);
      obj.type = schemerlicht_object_type_flonum;
      obj.value.fl = atan2(fl1, fl2);
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_SQRT:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_SQRT);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = sqrt(cast(schemerlicht_flonum, arg->value.fx));
        break;
      case schemerlicht_object_type_flonum:
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = sqrt(arg->value.fl);
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_NUMBER_STRING:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_NUMBER_STRING);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg) == schemerlicht_object_type_flonum)
      {
      int base = 10;
      if (b > 1)
        {
        schemerlicht_object* arg_base = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
        if (schemerlicht_object_get_type(arg_base) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg_base) == schemerlicht_object_type_flonum)
          {
          schemerlicht_fixnum fx = arg_base->value.fx;
          if (schemerlicht_object_get_type(arg_base) == schemerlicht_object_type_flonum)
            fx = cast(schemerlicht_fixnum, arg_base->value.fl);
          switch (fx)
            {
            case 2: base = 2; break;
            case 8: base = 8; break;
            case 10: base = 10; break;
            case 16: base = 16; break;
            }
          }
        }
      if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_fixnum)
        {
        char buffer[256];
        switch (base)
          {
          case 2:
            schemerlicht_fixnum_to_binary_char(buffer, arg->value.fx);
            break;
          case 8:
            schemerlicht_fixnum_to_oct_char(buffer, arg->value.fx);
            break;
          case 16:
            schemerlicht_fixnum_to_hex_char(buffer, arg->value.fx);
            break;
          default:
            schemerlicht_fixnum_to_char(buffer, arg->value.fx);
            break;
          }
        obj.type = schemerlicht_object_type_string;
        schemerlicht_string_init(ctxt, &obj.value.s, buffer);
        }
      else if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_flonum)
        {
        if (arg->value.fl != arg->value.fl)
          {
          obj.type = schemerlicht_object_type_string;
          schemerlicht_string_init(ctxt, &obj.value.s, "+nan.0");
          }
        else if (isfinite(arg->value.fl))
          {
          char buffer[256];
          schemerlicht_flonum_to_char_scientific(buffer, arg->value.fl);
          obj.type = schemerlicht_object_type_string;
          schemerlicht_string_init(ctxt, &obj.value.s, buffer);
          }
        else if (arg->value.fl < 0)
          {
          obj.type = schemerlicht_object_type_string;
          schemerlicht_string_init(ctxt, &obj.value.s, "-inf.0");
          }
        else
          {
          obj.type = schemerlicht_object_type_string;
          schemerlicht_string_init(ctxt, &obj.value.s, "+inf.0");
          }
        }
      schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
      ++ctxt->heap_pos;
      schemerlicht_set_object(heap_obj, &obj);
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_STRING_NUMBER:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING_NUMBER);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_false;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    if (schemerlicht_object_get_type(arg) == schemerlicht_object_type_string && arg->value.s.string_length > 0)
      {
      int base = 10;
      if (b > 1)
        {
        schemerlicht_object* arg_base = schemerlicht_vector_at(&ctxt->stack, a + c + 2, schemerlicht_object);
        if (schemerlicht_object_get_type(arg_base) == schemerlicht_object_type_fixnum || schemerlicht_object_get_type(arg_base) == schemerlicht_object_type_flonum)
          {
          schemerlicht_fixnum fx = arg_base->value.fx;
          if (schemerlicht_object_get_type(arg_base) == schemerlicht_object_type_flonum)
            fx = cast(schemerlicht_fixnum, arg_base->value.fl);
          switch (fx)
            {
            case 2: base = 2; break;
            case 8: base = 8; break;
            case 10: base = 10; break;
            case 16: base = 16; break;
            }
          }
        }
      char* endptr;
      obj.type = schemerlicht_object_type_fixnum;
      obj.value.fx = strtoll(arg->value.s.string_ptr, &endptr, base);
      uintptr_t dist = endptr - arg->value.s.string_ptr;
      if (dist < arg->value.s.string_length)
        {
        obj.type = schemerlicht_object_type_flonum;
        obj.value.fl = strtod(arg->value.s.string_ptr, &endptr);
        dist = endptr - arg->value.s.string_ptr;
        if (dist < arg->value.s.string_length)
          obj.type = schemerlicht_object_type_false;
        }
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_IS_NAN:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_NAN);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_false;
        break;
      case schemerlicht_object_type_flonum:
        obj.type = arg->value.fl == arg->value.fl ? schemerlicht_object_type_false : schemerlicht_object_type_true;
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_IS_INF:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_INF);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_false;
        break;
      case schemerlicht_object_type_flonum:
        obj.type = isfinite(arg->value.fl) ? schemerlicht_object_type_false : (arg->value.fl == arg->value.fl ? schemerlicht_object_type_true : schemerlicht_object_type_false);
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_IS_FINITE:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_FINITE);
  schemerlicht_object obj;
  obj.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + c + 1, schemerlicht_object);
    switch (schemerlicht_object_get_type(arg))
      {
      case schemerlicht_object_type_fixnum:
        obj.type = schemerlicht_object_type_true;
        break;
      case schemerlicht_object_type_flonum:
        obj.type = isfinite(arg->value.fl) ? schemerlicht_object_type_true : schemerlicht_object_type_false;
        break;
      default:
        break;
      }
    }
  schemerlicht_set_object(ra, &obj);
  }
  return;
  case SCHEMERLICHT_LIST_REF:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_LIST_REF);
  schemerlicht_object ret;
  if (b < 2)
    {
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* l = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* pos = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    if ((schemerlicht_object_get_type(l) != schemerlicht_object_type_pair && schemerlicht_object_get_type(l) != schemerlicht_object_type_nil) || schemerlicht_object_get_type(pos) != schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "list-ref: expects a list and fixnum as arguments");
      }
    else
      {
      schemerlicht_fixnum idx = pos->value.fx;
      if (idx < 0)
        {
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "list-ref: position is negative");
        }
      else
        {
        if (idx == 0)
          {
          if (schemerlicht_object_get_type(l) == schemerlicht_object_type_nil)
            {
            schemerlicht_set_object(&ret, l);
            }
          else
            {
            schemerlicht_object* v0 = schemerlicht_vector_at(&l->value.v, 0, schemerlicht_object);
            schemerlicht_set_object(&ret, v0);
            }
          }
        else
          {
          while (idx > 0 && (schemerlicht_object_get_type(l) == schemerlicht_object_type_pair))
            {
            schemerlicht_object* v1 = schemerlicht_vector_at(&l->value.v, 1, schemerlicht_object);
            l = v1;
            --idx;
            }
          if (idx > 0)
            {
            ret.type = schemerlicht_object_type_undefined;
            if (schemerlicht_object_get_type(l) == schemerlicht_object_type_pair)
              schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "list-ref: position is out of bounds");
            else
              schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "list-ref: not a valid list");
            }
          else
            {
            if (schemerlicht_object_get_type(l) == schemerlicht_object_type_nil)
              {
              schemerlicht_set_object(&ret, l);
              }
            else if (schemerlicht_object_get_type(l) == schemerlicht_object_type_pair)
              {
              schemerlicht_object* v0 = schemerlicht_vector_at(&l->value.v, 0, schemerlicht_object);
              schemerlicht_set_object(&ret, v0);
              }
            else
              {
              ret.type = schemerlicht_object_type_undefined;
              schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "list-ref: not a valid list");
              }
            }
          }
        }
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_LIST_TAIL:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_LIST_TAIL);
  schemerlicht_object ret;
  if (b < 2)
    {
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* l = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* pos = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    if ((schemerlicht_object_get_type(l) != schemerlicht_object_type_pair && schemerlicht_object_get_type(l) != schemerlicht_object_type_nil) || schemerlicht_object_get_type(pos) != schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "list-tail: expects a list and fixnum as arguments");
      }
    else
      {
      schemerlicht_fixnum idx = pos->value.fx;
      if (idx < 0)
        {
        ret.type = schemerlicht_object_type_undefined;
        schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "list-tail: position is negative");
        }
      else
        {
        if (idx == 0)
          {
          schemerlicht_set_object(&ret, l);
          }
        else
          {
          while (idx > 0 && (schemerlicht_object_get_type(l) == schemerlicht_object_type_pair))
            {
            schemerlicht_object* v1 = schemerlicht_vector_at(&l->value.v, 1, schemerlicht_object);
            l = v1;
            --idx;
            }
          if (idx > 0)
            {
            ret.type = schemerlicht_object_type_undefined;
            if (schemerlicht_object_get_type(l) == schemerlicht_object_type_pair)
              schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "list-tail: position is out of bounds");
            else
              schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "list-tail: not a valid list");
            }
          else
            {
            schemerlicht_set_object(&ret, l);
            }
          }
        }
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_REVERSE:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_REVERSE);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "reverse: expects a list as argument");
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* l = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(l) != schemerlicht_object_type_nil && schemerlicht_object_get_type(l) != schemerlicht_object_type_pair)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "reverse: expects a list as argument");
      schemerlicht_set_object(ra, &ret);
      }
    else
      {
      schemerlicht_vector v;
      schemerlicht_vector_init(ctxt, &v, schemerlicht_object);
      while (schemerlicht_object_get_type(l) != schemerlicht_object_type_nil)
        {
        schemerlicht_object* v0 = schemerlicht_vector_at(&l->value.v, 0, schemerlicht_object);
        schemerlicht_object* v1 = schemerlicht_vector_at(&l->value.v, 1, schemerlicht_object);
        schemerlicht_vector_push_back(ctxt, &v, *v0, schemerlicht_object);
        l = v1;
        if (schemerlicht_object_get_type(l) != schemerlicht_object_type_nil && schemerlicht_object_get_type(l) != schemerlicht_object_type_pair)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_undefined;
          schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "reverse: not a valid list");
          schemerlicht_set_object(ra, &ret);
          schemerlicht_vector_destroy(ctxt, &v);
          return;
          }
        }
      if (v.vector_size == 0)
        {
        schemerlicht_object ret;
        ret.type = schemerlicht_object_type_nil;
        schemerlicht_set_object(ra, &ret);
        }
      else
        {
        schemerlicht_object obj1 = make_schemerlicht_object_pair(ctxt);
        schemerlicht_object* v0 = schemerlicht_vector_at(&obj1.value.v, 0, schemerlicht_object);
        schemerlicht_object* v1 = schemerlicht_vector_at(&obj1.value.v, 1, schemerlicht_object);
        v1->type = schemerlicht_object_type_nil;
        schemerlicht_object* first_arg = schemerlicht_vector_begin(&v, schemerlicht_object);
        schemerlicht_set_object(v0, first_arg);
        schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
        schemerlicht_set_object(heap_obj, &obj1);
        ++ctxt->heap_pos;
        for (schemerlicht_memsize j = 1; j < v.vector_size; ++j)
          {
          schemerlicht_object obj2 = make_schemerlicht_object_pair(ctxt);
          v0 = schemerlicht_vector_at(&obj2.value.v, 0, schemerlicht_object);
          v1 = schemerlicht_vector_at(&obj2.value.v, 1, schemerlicht_object);
          schemerlicht_set_object(v1, heap_obj);
          schemerlicht_object* arg = schemerlicht_vector_at(&v, j, schemerlicht_object);
          schemerlicht_set_object(v0, arg);
          heap_obj = &ctxt->heap[ctxt->heap_pos];
          schemerlicht_set_object(heap_obj, &obj2);
          ++ctxt->heap_pos;
          }
        schemerlicht_set_object(ra, heap_obj);
        }
      schemerlicht_vector_destroy(ctxt, &v);
      }
    }
  }
  return;
  case SCHEMERLICHT_CHAR_UPCASE:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHAR_UPCASE);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* ch = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(ch) == schemerlicht_object_type_char)
      {
      ret.type = schemerlicht_object_type_char;
      if (ch->value.ch >= 'a' && ch->value.ch <= 'z')
        ret.value.ch = ch->value.ch - ('a' - 'A');
      else
        ret.value.ch = ch->value.ch;
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_CHAR_DOWNCASE:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHAR_DOWNCASE);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_undefined;
  if (b > 0)
    {
    schemerlicht_object* ch = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(ch) == schemerlicht_object_type_char)
      {
      ret.type = schemerlicht_object_type_char;
      if (ch->value.ch >= 'A' && ch->value.ch <= 'Z')
        ret.value.ch = ch->value.ch + ('a' - 'A');
      else
        ret.value.ch = ch->value.ch;
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_CHAR_IS_UPPER:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHAR_IS_UPPER);
  schemerlicht_object ret;
  if (b == 0)
    {
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    ret.type = schemerlicht_object_type_false;
    schemerlicht_object* ch = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(ch) == schemerlicht_object_type_char)
      {
      if (ch->value.ch >= 'A' && ch->value.ch <= 'Z')
        ret.type = schemerlicht_object_type_true;
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_CHAR_IS_LOWER:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHAR_IS_LOWER);
  schemerlicht_object ret;
  if (b == 0)
    {
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    ret.type = schemerlicht_object_type_false;
    schemerlicht_object* ch = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(ch) == schemerlicht_object_type_char)
      {
      if (ch->value.ch >= 'a' && ch->value.ch <= 'z')
        ret.type = schemerlicht_object_type_true;
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_CHAR_IS_ALPHA:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHAR_IS_ALPHA);
  schemerlicht_object ret;
  if (b == 0)
    {
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    ret.type = schemerlicht_object_type_false;
    schemerlicht_object* ch = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(ch) == schemerlicht_object_type_char)
      {
      if ((ch->value.ch >= 'A' && ch->value.ch <= 'Z') || (ch->value.ch >= 'a' && ch->value.ch <= 'z'))
        ret.type = schemerlicht_object_type_true;
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_CHAR_IS_NUMERIC:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHAR_IS_NUMERIC);
  schemerlicht_object ret;
  if (b == 0)
    {
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    ret.type = schemerlicht_object_type_false;
    schemerlicht_object* ch = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(ch) == schemerlicht_object_type_char)
      {
      if (ch->value.ch >= '0' && ch->value.ch <= '9')
        ret.type = schemerlicht_object_type_true;
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_CHAR_IS_WHITESPACE:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CHAR_IS_WHITESPACE);
  schemerlicht_object ret;
  if (b == 0)
    {
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    ret.type = schemerlicht_object_type_false;
    schemerlicht_object* ch = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(ch) == schemerlicht_object_type_char)
      {
      switch (ch->value.ch)
        {
        case 9:
        case 10:
        case 12:
        case 13:
        case 32:
          ret.type = schemerlicht_object_type_true;
          break;
        default:
          break;
        }
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_STRING_LIST:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_STRING_LIST);
  schemerlicht_object ret;
  if (b == 0)
    {
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_string)
      {
      if (v->value.s.string_length == 0)
        {
        ret.type = schemerlicht_object_type_nil;
        schemerlicht_set_object(ra, &ret);
        }
      else
        {
        schemerlicht_object obj1 = make_schemerlicht_object_pair(ctxt);
        schemerlicht_object* v0 = schemerlicht_vector_at(&obj1.value.v, 0, schemerlicht_object);
        schemerlicht_object* v1 = schemerlicht_vector_at(&obj1.value.v, 1, schemerlicht_object);
        v1->type = schemerlicht_object_type_nil;
        char* last_arg = schemerlicht_string_back(&v->value.s);
        v0->type = schemerlicht_object_type_char;
        v0->value.ch = *last_arg;
        schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
        schemerlicht_set_object(heap_obj, &obj1);
        ++ctxt->heap_pos;
        for (schemerlicht_memsize j = v->value.s.string_length - 1; j >= 1; --j)
          {
          schemerlicht_object obj2 = make_schemerlicht_object_pair(ctxt);
          v0 = schemerlicht_vector_at(&obj2.value.v, 0, schemerlicht_object);
          v1 = schemerlicht_vector_at(&obj2.value.v, 1, schemerlicht_object);
          schemerlicht_set_object(v1, heap_obj);
          char* arg = schemerlicht_string_at(&v->value.s, j - 1);
          v0->type = schemerlicht_object_type_char;
          v0->value.ch = *arg;
          heap_obj = &ctxt->heap[ctxt->heap_pos];
          schemerlicht_set_object(heap_obj, &obj2);
          ++ctxt->heap_pos;
          }
        schemerlicht_set_object(&ret, heap_obj);
        }
      }
    else
      {
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "vector->list: argument was not a vector");
      ret.type = schemerlicht_object_type_undefined;
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_LIST_STRING:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_LIST_STRING);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "list->string: expects a list as argument");
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* l = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(l) != schemerlicht_object_type_nil && schemerlicht_object_get_type(l) != schemerlicht_object_type_pair)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "list->string: expects a list as argument");
      schemerlicht_set_object(ra, &ret);
      }
    else
      {
      schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
      ++ctxt->heap_pos;
      *heap_obj = make_schemerlicht_object_string(ctxt, "");
      while (schemerlicht_object_get_type(l) != schemerlicht_object_type_nil)
        {
        schemerlicht_object* v0 = schemerlicht_vector_at(&l->value.v, 0, schemerlicht_object);
        schemerlicht_object* v1 = schemerlicht_vector_at(&l->value.v, 1, schemerlicht_object);
        if (schemerlicht_object_get_type(v0) != schemerlicht_object_type_char)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_undefined;
          schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "list->string: list should contain characters only");
          schemerlicht_set_object(ra, &ret);
          return;
          }
        //if (schemerlicht_char_needs_escape(v0->value.ch))
        //  schemerlicht_string_push_back(ctxt, &heap_obj->value.s, '\\');
        schemerlicht_string_push_back(ctxt, &heap_obj->value.s, v0->value.ch);
        l = v1;
        if (schemerlicht_object_get_type(l) != schemerlicht_object_type_nil && schemerlicht_object_get_type(l) != schemerlicht_object_type_pair)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_undefined;
          schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "list->string: not a valid list");
          schemerlicht_set_object(ra, &ret);
          return;
          }
        }
      schemerlicht_set_object(ra, heap_obj);
      }
    }
  }
  return;
  case SCHEMERLICHT_VECTOR_LIST:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_VECTOR_LIST);
  schemerlicht_object ret;
  if (b == 0)
    {
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_vector)
      {
      if (v->value.v.vector_size == 0)
        {
        ret.type = schemerlicht_object_type_nil;
        schemerlicht_set_object(ra, &ret);
        }
      else
        {
        schemerlicht_object obj1 = make_schemerlicht_object_pair(ctxt);
        schemerlicht_object* v0 = schemerlicht_vector_at(&obj1.value.v, 0, schemerlicht_object);
        schemerlicht_object* v1 = schemerlicht_vector_at(&obj1.value.v, 1, schemerlicht_object);
        v1->type = schemerlicht_object_type_nil;
        schemerlicht_object* last_arg = schemerlicht_vector_back(&v->value.v, schemerlicht_object);
        schemerlicht_set_object(v0, last_arg);
        schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
        schemerlicht_set_object(heap_obj, &obj1);
        ++ctxt->heap_pos;
        for (schemerlicht_memsize j = v->value.v.vector_size - 1; j >= 1; --j)
          {
          schemerlicht_object obj2 = make_schemerlicht_object_pair(ctxt);
          v0 = schemerlicht_vector_at(&obj2.value.v, 0, schemerlicht_object);
          v1 = schemerlicht_vector_at(&obj2.value.v, 1, schemerlicht_object);
          schemerlicht_set_object(v1, heap_obj);
          schemerlicht_object* arg = schemerlicht_vector_at(&v->value.v, j - 1, schemerlicht_object);
          schemerlicht_set_object(v0, arg);
          heap_obj = &ctxt->heap[ctxt->heap_pos];
          schemerlicht_set_object(heap_obj, &obj2);
          ++ctxt->heap_pos;
          }
        schemerlicht_set_object(&ret, heap_obj);
        }
      }
    else
      {
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "vector->list: argument was not a vector");
      ret.type = schemerlicht_object_type_undefined;
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_LIST_VECTOR:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_LIST_VECTOR);
  if (b == 0)
    {
    schemerlicht_object ret;
    ret.type = schemerlicht_object_type_undefined;
    schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "list->vector: expects a list as argument");
    schemerlicht_set_object(ra, &ret);
    }
  else
    {
    schemerlicht_object* l = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(l) != schemerlicht_object_type_nil && schemerlicht_object_get_type(l) != schemerlicht_object_type_pair)
      {
      schemerlicht_object ret;
      ret.type = schemerlicht_object_type_undefined;
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "list->vector: expects a list as argument");
      schemerlicht_set_object(ra, &ret);
      }
    else
      {
      schemerlicht_vector v;
      schemerlicht_vector_init(ctxt, &v, schemerlicht_object);
      while (schemerlicht_object_get_type(l) != schemerlicht_object_type_nil)
        {
        schemerlicht_object* v0 = schemerlicht_vector_at(&l->value.v, 0, schemerlicht_object);
        schemerlicht_object* v1 = schemerlicht_vector_at(&l->value.v, 1, schemerlicht_object);
        schemerlicht_vector_push_back(ctxt, &v, *v0, schemerlicht_object);
        l = v1;
        if (schemerlicht_object_get_type(l) != schemerlicht_object_type_nil && schemerlicht_object_get_type(l) != schemerlicht_object_type_pair)
          {
          schemerlicht_object ret;
          ret.type = schemerlicht_object_type_undefined;
          schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "list->vector: not a valid list");
          schemerlicht_set_object(ra, &ret);
          schemerlicht_vector_destroy(ctxt, &v);
          return;
          }
        }
      schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
      ++ctxt->heap_pos;
      *heap_obj = make_schemerlicht_object_vector(ctxt, v.vector_size);
      schemerlicht_object* vit = schemerlicht_vector_begin(&v, schemerlicht_object);
      schemerlicht_object* vit_end = schemerlicht_vector_end(&v, schemerlicht_object);
      schemerlicht_object* it = schemerlicht_vector_begin(&heap_obj->value.v, schemerlicht_object);
      for (; vit != vit_end; ++vit, ++it)
        {
        schemerlicht_set_object(it, vit);
        }
      schemerlicht_vector_destroy(ctxt, &v);
      schemerlicht_set_object(ra, heap_obj);
      }
    }
  }
  return;
  case SCHEMERLICHT_MAKE_PROMISE:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_MAKE_PROMISE);
  schemerlicht_object v = make_schemerlicht_object_promise(ctxt);
  if (b > 0)
    {
    schemerlicht_object* arg = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* obj_at_pos = schemerlicht_vector_begin(&v.value.v, schemerlicht_object);
    schemerlicht_set_object(obj_at_pos, arg);
    }
  else
    {
    schemerlicht_object* obj_at_pos = schemerlicht_vector_begin(&v.value.v, schemerlicht_object);
    obj_at_pos->type = schemerlicht_object_type_undefined;
    }
  schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
  schemerlicht_set_object(heap_obj, &v);
  ++ctxt->heap_pos;
  schemerlicht_set_object(ra, &v);
  }
  return;
  case SCHEMERLICHT_IS_PROMISE:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_PROMISE);
  schemerlicht_object ret;
  if (b > 0)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_promise)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    }
  else
    {
    ret.type = schemerlicht_object_type_false;
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_SLOT_REF:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_SLOT_REF);
  schemerlicht_object ret;
  if (b < 2)
    {
    ret.type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* pos = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(pos) != schemerlicht_object_type_fixnum)
      {
      ret.type = schemerlicht_object_type_undefined;
      }
    else
      {
      if (pos->value.fx < 0 || pos->value.fx >= v->value.v.vector_size) // out of bounds
        {
        ret.type = schemerlicht_object_type_undefined;
        }
      else
        {
        ret = *schemerlicht_vector_at(&v->value.v, pos->value.fx, schemerlicht_object);
        }
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_SLOT_SET:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_SLOT_SET);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_void;
  if (b > 2)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* pos = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    schemerlicht_object* value = schemerlicht_vector_at(&ctxt->stack, a + 3 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(pos) == schemerlicht_object_type_fixnum)
      {
      if (pos->value.fx >= 0 && pos->value.fx < v->value.v.vector_size)
        {
        schemerlicht_object* value_to_change = schemerlicht_vector_at(&v->value.v, pos->value.fx, schemerlicht_object);
        schemerlicht_set_object(value_to_change, value);
        }
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_MAKE_PORT:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_MAKE_PORT);
  if (b < 6)
    {
    ra->type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object v = make_schemerlicht_object_port(ctxt);

    for (int i = 0; i < 6; ++i)
      {
      schemerlicht_object* ri = schemerlicht_vector_at(&ctxt->stack, a + c + 1 + i, schemerlicht_object);
      schemerlicht_object* oi = schemerlicht_vector_at(&v.value.v, i, schemerlicht_object);
      schemerlicht_set_object(oi, ri);
      switch (i)
        {
        case 0:
          if (schemerlicht_object_get_type(ri) != schemerlicht_object_type_true && schemerlicht_object_get_type(ri) != schemerlicht_object_type_false)
            {
            schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "first argument of %make-port should be #t or #f.");
            }
          break;
        case 1:
          if (schemerlicht_object_get_type(ri) != schemerlicht_object_type_string)
            {
            schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "second argument of %make-port should be a string indicating the port name.");
            }
          break;
        case 2:
          if (schemerlicht_object_get_type(ri) != schemerlicht_object_type_fixnum)
            {
            schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "third argument of %make-port should be a fixnum representing the file descriptor.");
            }
          break;
        case 3:
          if (schemerlicht_object_get_type(ri) != schemerlicht_object_type_string)
            {
            schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "fourth argument of %make-port should be a string representing the port buffer.");
            }
          break;
        case 4:
          if (schemerlicht_object_get_type(ri) != schemerlicht_object_type_fixnum)
            {
            schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "fifth argument of %make-port should be an index pointing to the next position in the buffer.");
            }
          break;
        case 5:
          if (schemerlicht_object_get_type(ri) != schemerlicht_object_type_fixnum)
            {
            schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "sixth argument of %make-port should be an index representing the size of the buffer.");
            }
          schemerlicht_object* bytes_read = schemerlicht_vector_at(&v.value.v, 6, schemerlicht_object);
          bytes_read->type = schemerlicht_object_type_fixnum;
          bytes_read->value.fx = ri->value.fx;
          break;
        default:
          break;
        }
      }

    schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
    schemerlicht_set_object(heap_obj, &v);
    ++ctxt->heap_pos;
    schemerlicht_set_object(ra, &v);
    }
  }
  return;
  case SCHEMERLICHT_IS_PORT:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_PORT);
  schemerlicht_object ret;
  if (b > 0)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_port)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    }
  else
    {
    ret.type = schemerlicht_object_type_false;
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_WRITE_CHAR:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_WRITE_CHAR);
  if (b > 1)
    {
    schemerlicht_object* ch = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* p = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(ch) == schemerlicht_object_type_char && schemerlicht_object_get_type(p) == schemerlicht_object_type_port && schemerlicht_object_get_type(schemerlicht_vector_begin(&p->value.v, schemerlicht_object)) != schemerlicht_object_type_true)
      {
      int fileid = cast(int, schemerlicht_vector_at(&p->value.v, 2, schemerlicht_object)->value.fx);
      if (fileid == SCHEMERLICHT_STRING_PORT_ID)
        {
        schemerlicht_fixnum required_length = schemerlicht_vector_at(&p->value.v, 4, schemerlicht_object)->value.fx + 1;
        schemerlicht_fixnum available_length = schemerlicht_vector_at(&p->value.v, 5, schemerlicht_object)->value.fx;
        if (required_length > available_length)
          {
          schemerlicht_object* s = schemerlicht_vector_at(&p->value.v, 3, schemerlicht_object);
          schemerlicht_string new_string;
          schemerlicht_string_init_with_size(ctxt, &new_string, 256 + s->value.s.string_length, 0);
          s->value.s = new_string; // old string is on the heap and will be cleaned up by gc
          schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
          schemerlicht_set_object(heap_obj, s);
          ++ctxt->heap_pos;
          schemerlicht_vector_at(&p->value.v, 5, schemerlicht_object)->value.fx = new_string.string_length;
          }
        }
      schemerlicht_fixnum current_pos = schemerlicht_vector_at(&p->value.v, 4, schemerlicht_object)->value.fx;
      schemerlicht_fixnum buffer_length = schemerlicht_vector_at(&p->value.v, 5, schemerlicht_object)->value.fx;
      schemerlicht_object* buffer = schemerlicht_vector_at(&p->value.v, 3, schemerlicht_object);
      if (current_pos >= buffer_length)
        {
        schemerlicht_write(fileid, buffer->value.s.string_ptr, cast(schemerlicht_memsize, current_pos));
        current_pos = 0;
        }
      buffer->value.s.string_ptr[current_pos++] = ch->value.ch;
      schemerlicht_vector_at(&p->value.v, 4, schemerlicht_object)->value.fx = current_pos;
      }
    else
      {
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "%write-char expects a character and a port as arguments.");
      }
    }
  ra->type = schemerlicht_object_type_void;
  }
  return;
  case SCHEMERLICHT_FLUSH_OUTPUT_PORT:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FLUSH_OUTPUT_PORT);
  if (b > 0)
    {
    schemerlicht_object* p = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(p) == schemerlicht_object_type_port && schemerlicht_object_get_type(schemerlicht_vector_begin(&p->value.v, schemerlicht_object)) != schemerlicht_object_type_true)
      {
      int fileid = cast(int, schemerlicht_vector_at(&p->value.v, 2, schemerlicht_object)->value.fx);
      if (fileid >= 0)
        {
        schemerlicht_fixnum current_pos = schemerlicht_vector_at(&p->value.v, 4, schemerlicht_object)->value.fx;
        //schemerlicht_fixnum buffer_length = schemerlicht_vector_at(&p->value.v, 5, schemerlicht_object)->value.fx;
        schemerlicht_object* buffer = schemerlicht_vector_at(&p->value.v, 3, schemerlicht_object);
        schemerlicht_write(fileid, buffer->value.s.string_ptr, cast(schemerlicht_memsize, current_pos));
        schemerlicht_vector_at(&p->value.v, 4, schemerlicht_object)->value.fx = 0;
        }
      }
    else
      {
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "%flush-output-port expects and output port as argument.");
      }
    }
  ra->type = schemerlicht_object_type_void;
  }
  return;
  case SCHEMERLICHT_READ_CHAR:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_READ_CHAR);
  if (b > 0)
    {
    schemerlicht_object* p = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(p) == schemerlicht_object_type_port && schemerlicht_object_get_type(schemerlicht_vector_begin(&p->value.v, schemerlicht_object)) == schemerlicht_object_type_true)
      {
      if (get_char(&ra->value.ch, p, 1))
        {
        ra->type = schemerlicht_object_type_char;
        }
      else
        {
        ra->type = schemerlicht_object_type_eof;
        }
      }
    else
      {
      ra->type = schemerlicht_object_type_undefined;
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "%read-char expects a port as argument.");
      }
    }
  else
    {
    ra->type = schemerlicht_object_type_undefined;
    schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "%read-char expects a port as argument.");
    }
  }
  return;
  case SCHEMERLICHT_PEEK_CHAR:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_PEEK_CHAR);
  if (b > 0)
    {
    schemerlicht_object* p = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(p) == schemerlicht_object_type_port && schemerlicht_object_get_type(schemerlicht_vector_begin(&p->value.v, schemerlicht_object)) == schemerlicht_object_type_true)
      {
      if (get_char(&ra->value.ch, p, 0))
        {
        ra->type = schemerlicht_object_type_char;
        }
      else
        {
        ra->type = schemerlicht_object_type_eof;
        }
      }
    else
      {
      ra->type = schemerlicht_object_type_undefined;
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "%peek-char expects a port as argument.");
      }
    }
  else
    {
    ra->type = schemerlicht_object_type_undefined;
    schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "%peek-char expects a port as argument.");
    }
  }
  return;
  case SCHEMERLICHT_IS_INPUT_PORT:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_INPUT_PORT);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_false;
  if (b > 0)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_port)
      {
      schemerlicht_object* is_input = schemerlicht_vector_at(&v->value.v, 0, schemerlicht_object);
      if (schemerlicht_object_get_type(is_input) == schemerlicht_object_type_true)
        ret.type = schemerlicht_object_type_true;
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_IS_OUTPUT_PORT:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_OUTPUT_PORT);
  schemerlicht_object ret;
  ret.type = schemerlicht_object_type_false;
  if (b > 0)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_port)
      {
      schemerlicht_object* is_input = schemerlicht_vector_at(&v->value.v, 0, schemerlicht_object);
      if (schemerlicht_object_get_type(is_input) != schemerlicht_object_type_true)
        ret.type = schemerlicht_object_type_true;
      }
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_OPEN_INPUT_FILE:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_OPEN_INPUT_FILE);
  if (b < 1)
    {
    ra->type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* fn = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(fn) != schemerlicht_object_type_string)
      {
      ra->type = schemerlicht_object_type_undefined;
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "open-input-file expects a string as argument.");
      }
    else
      {
      schemerlicht_object v = make_schemerlicht_object_port(ctxt);
      schemerlicht_vector_at(&v.value.v, 0, schemerlicht_object)->type = schemerlicht_object_type_true;
      schemerlicht_object* filename = schemerlicht_vector_at(&v.value.v, 1, schemerlicht_object);
      schemerlicht_set_object(filename, fn);
      schemerlicht_object* id = schemerlicht_vector_at(&v.value.v, 2, schemerlicht_object);
      id->type = schemerlicht_object_type_fixnum;
      id->value.fx = cast(schemerlicht_fixnum, schemerlicht_open_input_file(fn->value.s.string_ptr));
      if (id->value.fx < 0 && ctxt->filenames_list.vector_size > 0)
        {
        for (int i = cast(int, ctxt->filenames_list.vector_size - 1); i >= 0; --i)
          {
          schemerlicht_string* pathfile = schemerlicht_vector_at(&ctxt->filenames_list, cast(schemerlicht_memsize, i), schemerlicht_string);
          int pos = cast(int, pathfile->string_length) - 1;
          while (pos >= 0 && pathfile->string_ptr[pos] != '/' && pathfile->string_ptr[pos] != '\\')
            --pos;
          schemerlicht_assert(pos < 0 || pathfile->string_ptr[pos] == '/' || pathfile->string_ptr[pos] == '\\');
          if (pos > 0)
            {
            schemerlicht_string path;
            schemerlicht_string_init_ranged(ctxt, &path, pathfile->string_ptr, pathfile->string_ptr + pos + 1);
            schemerlicht_string_append(ctxt, &path, &fn->value.s);
            id->value.fx = cast(schemerlicht_fixnum, schemerlicht_open_input_file(path.string_ptr));
            schemerlicht_string_destroy(ctxt, &path);
            if (id->value.fx >= 0)
              break;
            }
          }
        }
      schemerlicht_object* str = schemerlicht_vector_at(&v.value.v, 3, schemerlicht_object);
      str->type = schemerlicht_object_type_string;
      schemerlicht_string_init_with_size(ctxt, &str->value.s, 4096, 0);
      schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
      schemerlicht_set_object(heap_obj, str);
      ++ctxt->heap_pos;

      schemerlicht_object* pos = schemerlicht_vector_at(&v.value.v, 4, schemerlicht_object);
      pos->type = schemerlicht_object_type_fixnum;
      pos->value.fx = 4096;

      schemerlicht_object* sz = schemerlicht_vector_at(&v.value.v, 5, schemerlicht_object);
      sz->type = schemerlicht_object_type_fixnum;
      sz->value.fx = 4096;

      schemerlicht_object* bytes_read = schemerlicht_vector_at(&v.value.v, 6, schemerlicht_object);
      bytes_read->type = schemerlicht_object_type_fixnum;
      bytes_read->value.fx = 4096;

      heap_obj = &ctxt->heap[ctxt->heap_pos];
      schemerlicht_set_object(heap_obj, &v);
      ++ctxt->heap_pos;
      schemerlicht_set_object(ra, &v);
      }
    }
  }
  return;
  case SCHEMERLICHT_OPEN_OUTPUT_FILE:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_OPEN_OUTPUT_FILE);
  if (b < 1)
    {
    ra->type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* fn = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(fn) != schemerlicht_object_type_string)
      {
      ra->type = schemerlicht_object_type_undefined;
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "open-input-file expects a string as argument.");
      }
    else
      {
      schemerlicht_object v = make_schemerlicht_object_port(ctxt);
      schemerlicht_vector_at(&v.value.v, 0, schemerlicht_object)->type = schemerlicht_object_type_false;
      schemerlicht_object* filename = schemerlicht_vector_at(&v.value.v, 1, schemerlicht_object);
      schemerlicht_set_object(filename, fn);
      schemerlicht_object* id = schemerlicht_vector_at(&v.value.v, 2, schemerlicht_object);
      id->type = schemerlicht_object_type_fixnum;
      id->value.fx = cast(schemerlicht_fixnum, schemerlicht_open_output_file(fn->value.s.string_ptr));

      schemerlicht_object* str = schemerlicht_vector_at(&v.value.v, 3, schemerlicht_object);
      str->type = schemerlicht_object_type_string;
      schemerlicht_string_init_with_size(ctxt, &str->value.s, 4096, 0);
      schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
      schemerlicht_set_object(heap_obj, str);
      ++ctxt->heap_pos;

      schemerlicht_object* pos = schemerlicht_vector_at(&v.value.v, 4, schemerlicht_object);
      pos->type = schemerlicht_object_type_fixnum;
      pos->value.fx = 0;

      schemerlicht_object* sz = schemerlicht_vector_at(&v.value.v, 5, schemerlicht_object);
      sz->type = schemerlicht_object_type_fixnum;
      sz->value.fx = 4096;

      schemerlicht_object* unused = schemerlicht_vector_at(&v.value.v, 6, schemerlicht_object);
      unused->type = schemerlicht_object_type_fixnum;
      unused->value.fx = 0;

      heap_obj = &ctxt->heap[ctxt->heap_pos];
      schemerlicht_set_object(heap_obj, &v);
      ++ctxt->heap_pos;
      schemerlicht_set_object(ra, &v);
      }
    }
  }
  return;
  case SCHEMERLICHT_CLOSE_INPUT_PORT:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CLOSE_INPUT_PORT);
  if (b < 1)
    {
    ra->type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* p = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(p) == schemerlicht_object_type_port && schemerlicht_object_get_type(schemerlicht_vector_at(&p->value.v, 0, schemerlicht_object)) == schemerlicht_object_type_true)
      {
      ra->type = schemerlicht_object_type_void;
      schemerlicht_object* id = schemerlicht_vector_at(&p->value.v, 2, schemerlicht_object);
      schemerlicht_close_file(cast(int, id->value.fx));
      schemerlicht_vector_at(&p->value.v, 2, schemerlicht_object)->value.fx = -1; // remove file handle / mark as closed
      }
    else
      {
      ra->type = schemerlicht_object_type_undefined;
      }
    }
  }
  return;
  case SCHEMERLICHT_CLOSE_OUTPUT_PORT:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_CLOSE_OUTPUT_PORT);
  if (b < 1)
    {
    ra->type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* p = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(p) == schemerlicht_object_type_port && schemerlicht_object_get_type(schemerlicht_vector_at(&p->value.v, 0, schemerlicht_object)) != schemerlicht_object_type_true)
      {
      ra->type = schemerlicht_object_type_void;
      schemerlicht_object* id = schemerlicht_vector_at(&p->value.v, 2, schemerlicht_object);
      schemerlicht_close_file(cast(int, id->value.fx));
      }
    else
      {
      ra->type = schemerlicht_object_type_undefined;
      }
    }
  }
  return;
  case SCHEMERLICHT_IS_EOF:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_EOF);
  schemerlicht_object ret;
  if (b > 0)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_eof)
      ret.type = schemerlicht_object_type_true;
    else
      ret.type = schemerlicht_object_type_false;
    }
  else
    {
    ret.type = schemerlicht_object_type_false;
    }
  schemerlicht_set_object(ra, &ret);
  }
  return;
  case SCHEMERLICHT_IS_CHAR_READY:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_CHAR_READY);
  if (b > 0)
    {
    schemerlicht_object* p = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(p) == schemerlicht_object_type_port && schemerlicht_object_get_type(schemerlicht_vector_at(&p->value.v, 0, schemerlicht_object)) == schemerlicht_object_type_true)
      {
      schemerlicht_fixnum current_pos = schemerlicht_vector_at(&p->value.v, 4, schemerlicht_object)->value.fx;
      //schemerlicht_fixnum buffer_length = schemerlicht_vector_at(&p->value.v, 5, schemerlicht_object)->value.fx;
      schemerlicht_fixnum bytes_read = schemerlicht_vector_at(&p->value.v, 6, schemerlicht_object)->value.fx;
      if (bytes_read == 0) // eof
        ra->type = schemerlicht_object_type_true;
      else
        {
        if (current_pos >= bytes_read)
          ra->type = schemerlicht_object_type_false;
        else
          ra->type = schemerlicht_object_type_true;
        }
      }
    else
      {
      ra->type = schemerlicht_object_type_undefined;
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "%char-ready expects an input port as argument.");
      }
    }
  else
    {
    ra->type = schemerlicht_object_type_undefined;
    schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "%char-ready expects an input port as argument.");
    }
  }
  return;
  case SCHEMERLICHT_WRITE:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_WRITE);
  if (b < 2)
    {
    schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "%write expects an object and an output port as argument.");
    ra->type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* obj = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* p = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(p) == schemerlicht_object_type_port && schemerlicht_object_get_type(schemerlicht_vector_at(&p->value.v, 0, schemerlicht_object)) != schemerlicht_object_type_true)
      {
      ra->type = schemerlicht_object_type_void;
      schemerlicht_string str = schemerlicht_object_to_string(ctxt, obj, 0);
      int fileid = cast(int, schemerlicht_vector_at(&p->value.v, 2, schemerlicht_object)->value.fx);
      if (fileid == SCHEMERLICHT_STRING_PORT_ID)
        {
        schemerlicht_fixnum required_length = schemerlicht_vector_at(&p->value.v, 4, schemerlicht_object)->value.fx + str.string_length;
        schemerlicht_fixnum available_length = schemerlicht_vector_at(&p->value.v, 5, schemerlicht_object)->value.fx;
        if (required_length > available_length)
          {
          schemerlicht_object* s = schemerlicht_vector_at(&p->value.v, 3, schemerlicht_object);
          schemerlicht_string new_string;
          schemerlicht_memsize size_init = 256;
          if (required_length - available_length > size_init)
            size_init = cast(schemerlicht_memsize, required_length - available_length);
          schemerlicht_string_init_with_size(ctxt, &new_string, size_init + s->value.s.string_length, 0);
          s->value.s = new_string; // old string is on the heap and will be cleaned up by gc
          schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
          schemerlicht_set_object(heap_obj, s);
          ++ctxt->heap_pos;
          schemerlicht_vector_at(&p->value.v, 5, schemerlicht_object)->value.fx = new_string.string_length;
          }
        }
      schemerlicht_fixnum current_pos = schemerlicht_vector_at(&p->value.v, 4, schemerlicht_object)->value.fx;
      schemerlicht_fixnum buffer_length = schemerlicht_vector_at(&p->value.v, 5, schemerlicht_object)->value.fx;
      schemerlicht_object* buffer = schemerlicht_vector_at(&p->value.v, 3, schemerlicht_object);
      char* chars_to_write = str.string_ptr;
      char* chars_to_write_end = str.string_ptr + str.string_length;

      while (chars_to_write < chars_to_write_end)
        {
        intptr_t dist = chars_to_write_end - chars_to_write;
        schemerlicht_fixnum buffer_size_remaining = buffer_length - current_pos;
        if (buffer_size_remaining < dist)
          {
          memcpy(buffer->value.s.string_ptr + current_pos, chars_to_write, buffer_size_remaining);
          schemerlicht_write(fileid, buffer->value.s.string_ptr, cast(schemerlicht_memsize, buffer_length));
          current_pos = 0;
          chars_to_write += buffer_size_remaining;
          }
        else
          {
          memcpy(buffer->value.s.string_ptr + current_pos, chars_to_write, dist);
          current_pos += dist;
          chars_to_write += dist;
          schemerlicht_vector_at(&p->value.v, 4, schemerlicht_object)->value.fx = current_pos;
          }
        }
      schemerlicht_string_destroy(ctxt, &str);
      }
    else
      {
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "%write expects an object and an output port as argument.");
      ra->type = schemerlicht_object_type_undefined;
      }
    }
  }
  return;
  case SCHEMERLICHT_DISPLAY:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_DISPLAY);
  if (b < 2)
    {
    schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "%display expects an object and an output port as argument.");
    ra->type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* obj = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* p = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(p) == schemerlicht_object_type_port && schemerlicht_object_get_type(schemerlicht_vector_at(&p->value.v, 0, schemerlicht_object)) != schemerlicht_object_type_true)
      {
      ra->type = schemerlicht_object_type_void;
      schemerlicht_string str = schemerlicht_object_to_string(ctxt, obj, 1);
      int fileid = cast(int, schemerlicht_vector_at(&p->value.v, 2, schemerlicht_object)->value.fx);
      if (fileid == SCHEMERLICHT_STRING_PORT_ID)
        {
        schemerlicht_fixnum required_length = schemerlicht_vector_at(&p->value.v, 4, schemerlicht_object)->value.fx + str.string_length;
        schemerlicht_fixnum available_length = schemerlicht_vector_at(&p->value.v, 5, schemerlicht_object)->value.fx;
        if (required_length > available_length)
          {
          schemerlicht_object* s = schemerlicht_vector_at(&p->value.v, 3, schemerlicht_object);
          schemerlicht_string new_string;
          schemerlicht_memsize size_init = 256;
          if (required_length - available_length > size_init)
            size_init = cast(schemerlicht_memsize, required_length - available_length);
          schemerlicht_string_init_with_size(ctxt, &new_string, size_init + s->value.s.string_length, 0);
          s->value.s = new_string; // old string is on the heap and will be cleaned up by gc
          schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
          schemerlicht_set_object(heap_obj, s);
          ++ctxt->heap_pos;
          schemerlicht_vector_at(&p->value.v, 5, schemerlicht_object)->value.fx = new_string.string_length;
          }
        }
      schemerlicht_fixnum current_pos = schemerlicht_vector_at(&p->value.v, 4, schemerlicht_object)->value.fx;
      schemerlicht_fixnum buffer_length = schemerlicht_vector_at(&p->value.v, 5, schemerlicht_object)->value.fx;
      schemerlicht_object* buffer = schemerlicht_vector_at(&p->value.v, 3, schemerlicht_object);
      char* chars_to_write = str.string_ptr;
      char* chars_to_write_end = str.string_ptr + str.string_length;

      while (chars_to_write < chars_to_write_end)
        {
        intptr_t dist = chars_to_write_end - chars_to_write;
        schemerlicht_fixnum buffer_size_remaining = buffer_length - current_pos;
        if (buffer_size_remaining < dist)
          {
          memcpy(buffer->value.s.string_ptr + current_pos, chars_to_write, buffer_size_remaining);
          schemerlicht_write(fileid, buffer->value.s.string_ptr, cast(schemerlicht_memsize, buffer_length));
          current_pos = 0;
          chars_to_write += buffer_size_remaining;
          }
        else
          {
          memcpy(buffer->value.s.string_ptr + current_pos, chars_to_write, dist);
          current_pos += dist;
          chars_to_write += dist;
          schemerlicht_vector_at(&p->value.v, 4, schemerlicht_object)->value.fx = current_pos;
          }
        }
      schemerlicht_string_destroy(ctxt, &str);
      }
    else
      {
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "%display expects an object and an output port as argument.");
      ra->type = schemerlicht_object_type_undefined;
      }
    }
  }
  return;
  case SCHEMERLICHT_READ:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_READ);
  if (b < 1)
    {
    schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "%read expects an input port as argument.");
    ra->type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* p = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(p) == schemerlicht_object_type_port && schemerlicht_object_get_type(schemerlicht_vector_at(&p->value.v, 0, schemerlicht_object)) == schemerlicht_object_type_true)
      {
      schemerlicht_string buff;
      schemerlicht_string_init(ctxt, &buff, "");
      schemerlicht_cell cell = schemerlicht_read_datum(ctxt, NULL, &buff, cast(void*, p), &_port_get_char, &_port_next_char, &_port_get_position);
#if 0
      schemerlicht_dump_cell_to_string(ctxt, &cell, &buff);
      printf("%s\n-------\n", buff.string_ptr);
#endif
      if (cell.type == schemerlicht_ct_invalid_cell)
        ra->type = schemerlicht_object_type_eof;
      else
        {
        schemerlicht_object obj = schemerlicht_cell_to_object(ctxt, &cell);
        schemerlicht_set_object(ra, &obj);
        }
      schemerlicht_string_destroy(ctxt, &buff);
      schemerlicht_destroy_cell(ctxt, &cell);
      }
    else
      {
      schemerlicht_runtime_error_cstr(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, "%read expects an input port as argument.");
      ra->type = schemerlicht_object_type_undefined;
      }
    }
  }
  return;
  case SCHEMERLICHT_LOAD:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_LOAD);
  if (b == 0)
    {
    ra->type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* fn = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(fn) == schemerlicht_object_type_string)
      {
      FILE* f = fopen(fn->value.s.string_ptr, "r");
      if (!f && ctxt->filenames_list.vector_size > 0)
        {
        for (int i = cast(int, ctxt->filenames_list.vector_size - 1); i >= 0; --i)
          {
          schemerlicht_string* pathfile = schemerlicht_vector_at(&ctxt->filenames_list, cast(schemerlicht_memsize, i), schemerlicht_string);
          int pos = cast(int, pathfile->string_length) - 1;
          while (pos >= 0 && pathfile->string_ptr[pos] != '/' && pathfile->string_ptr[pos] != '\\')
            --pos;
          schemerlicht_assert(pos < 0 || pathfile->string_ptr[pos] == '/' || pathfile->string_ptr[pos] == '\\');
          if (pos > 0)
            {
            schemerlicht_string path;
            schemerlicht_string_init_ranged(ctxt, &path, pathfile->string_ptr, pathfile->string_ptr + pos + 1);
            schemerlicht_string_append(ctxt, &path, &fn->value.s);
            f = fopen(path.string_ptr, "r");
            schemerlicht_string_destroy(ctxt, &path);
            if (f)
              break;
            }
          }
        }
      if (!f)
        {
        schemerlicht_string msg;
        schemerlicht_string_init(ctxt, &msg, "Cannot open file ");
        schemerlicht_string_append(ctxt, &msg, &fn->value.s);
        schemerlicht_runtime_error(ctxt, SCHEMERLICHT_ERROR_RUNERROR, -1, -1, &msg);
        }
      if (f)
        {
        schemerlicht_string filename_loading;
        schemerlicht_string_copy(ctxt, &filename_loading, &fn->value.s);
        schemerlicht_vector_push_back(ctxt, &ctxt->filenames_list, filename_loading, schemerlicht_string);
        schemerlicht_stream str;
        schemerlicht_stream_init(ctxt, &str, 256);
        char buffer[256];
        size_t bytes_read = fread(buffer, 1, 256, f);
        while (bytes_read)
          {
          schemerlicht_stream_write(ctxt, &str, buffer, cast(schemerlicht_memsize, bytes_read), 0);
          bytes_read = fread(buffer, 1, 256, f);
          }
        fclose(f);
        schemerlicht_stream_rewind(&str);
        schemerlicht_vector tokens = tokenize(ctxt, &str);
        schemerlicht_stream_close(ctxt, &str);

        //make new stack so that old stack is not overwritten.
        //new stack needs to be created before we run any macros.

#ifdef SCHEMERLICHT_MAKE_NEW_STACK_DURING_LOAD
        schemerlicht_vector stack_store = ctxt->stack;
        schemerlicht_vector new_stack;
        schemerlicht_vector_init_with_size(ctxt, &new_stack, schemerlicht_maxstack, schemerlicht_object);
        ctxt->stack = new_stack;
#else
        void* store_stack_pointer = ctxt->stack.vector_ptr;
        ctxt->stack.vector_ptr = cast(void*, ra);
        ctxt->stack.vector_size -= a;
#endif           

        schemerlicht_program prog = make_program(ctxt, &tokens);
        schemerlicht_preprocess(ctxt, &prog);
#if 0
        schemerlicht_string dumped = schemerlicht_dump(ctxt, &prog);
        printf("%s\n", dumped.string_ptr);
        schemerlicht_string_destroy(ctxt, &dumped);
#endif
        if (prog.expressions.vector_size > 0)
          {
          schemerlicht_vector compiled_program = schemerlicht_compile_program(ctxt, &prog);
          schemerlicht_print_any_error(ctxt);
          destroy_tokens_vector(ctxt, &tokens);
          schemerlicht_program_destroy(ctxt, &prog);
          if (ctxt->number_of_compile_errors == 0 && ctxt->number_of_syntax_errors == 0)
            {
            schemerlicht_object* res = schemerlicht_run_program(ctxt, &compiled_program);
            schemerlicht_set_object(ra, res);
            //ra->type = schemerlicht_object_type_undefined;          
            schemerlicht_compiled_program_register(ctxt, &compiled_program);
            }
          else
            {
            schemerlicht_compiled_program_destroy(ctxt, &compiled_program);
            ra->type = schemerlicht_object_type_undefined;
            }
          }
        else
          {
          destroy_tokens_vector(ctxt, &tokens);
          schemerlicht_program_destroy(ctxt, &prog);
          ra->type = schemerlicht_object_type_undefined;
          }
        //restore old stack
#ifdef SCHEMERLICHT_MAKE_NEW_STACK_DURING_LOAD
        schemerlicht_vector_destroy(ctxt, &new_stack);
        ctxt->stack = stack_store;
#else
        ctxt->stack.vector_ptr = store_stack_pointer;
        ctxt->stack.vector_size += a;
#endif
        schemerlicht_string_destroy(ctxt, schemerlicht_vector_back(&ctxt->filenames_list, schemerlicht_string));
        schemerlicht_vector_pop_back(&ctxt->filenames_list);
        }
      else
        ra->type = schemerlicht_object_type_undefined;
      }
    else
      {
      ra->type = schemerlicht_object_type_undefined;
      }
    }
  }
  return;
  case SCHEMERLICHT_EVAL:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_EVAL);
  if (b == 0)
    {
    ra->type = schemerlicht_object_type_undefined;
    }
  else
    {
    schemerlicht_object* q = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_string s = schemerlicht_object_to_string(ctxt, q, 0);
    schemerlicht_context* eval_ctxt = ctxt;
    if (b > 1)
      {
      schemerlicht_object* e = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
      if (schemerlicht_object_get_type(e) == schemerlicht_object_type_environment)
        {
        eval_ctxt = cast(schemerlicht_context*, e->value.ptr);
        }
      }
    int stack_offset = 2;
    void* store_stack_pointer = ctxt->stack.vector_ptr;
    if (eval_ctxt == ctxt)
      {
      while (schemerlicht_vector_at(&ctxt->stack, stack_offset, schemerlicht_object)->type != schemerlicht_object_type_blocking)
        ++stack_offset;
      ctxt->stack.vector_ptr = cast(void*, cast(schemerlicht_object*, ctxt->stack.vector_ptr) + stack_offset);
      ctxt->stack.vector_size -= stack_offset;
      }
    schemerlicht_stream str;
    schemerlicht_memsize len = s.string_length;
    schemerlicht_stream_init(eval_ctxt, &str, len);
    schemerlicht_stream_write(eval_ctxt, &str, s.string_ptr, len, 0);
    schemerlicht_stream_rewind(&str);
    schemerlicht_vector tokens = tokenize(eval_ctxt, &str);
    schemerlicht_stream_close(eval_ctxt, &str);
    schemerlicht_program prog = make_program(eval_ctxt, &tokens);
    schemerlicht_preprocess(eval_ctxt, &prog);
    schemerlicht_vector compiled_program = schemerlicht_compile_program(eval_ctxt, &prog);
    schemerlicht_object* res = schemerlicht_run_program(ctxt, &compiled_program);
    schemerlicht_object res_copy = schemerlicht_object_deep_copy(ctxt, res);
    schemerlicht_compiled_program_destroy(eval_ctxt, &compiled_program);
    destroy_tokens_vector(eval_ctxt, &tokens);
    schemerlicht_program_destroy(eval_ctxt, &prog);
    schemerlicht_string_destroy(ctxt, &s);
    schemerlicht_set_object(ra, &res_copy);
    if (eval_ctxt == ctxt)
      {
      ctxt->stack.vector_ptr = store_stack_pointer;
      ctxt->stack.vector_size += stack_offset;
      }
    }
  }
  return;
  case SCHEMERLICHT_PUTENV:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_PUTENV);
  if (b < 2)
    {
    ra->type = schemerlicht_object_type_false;
    }
  else
    {
    schemerlicht_object* s1 = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    schemerlicht_object* s2 = schemerlicht_vector_at(&ctxt->stack, a + 2 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(s1) == schemerlicht_object_type_string && schemerlicht_object_get_type(s2) == schemerlicht_object_type_string)
      {
      int res = schemerlicht_putenv(s1->value.s.string_ptr, s2->value.s.string_ptr);
      if (res == 0)
        ra->type = schemerlicht_object_type_true;
      else
        ra->type = schemerlicht_object_type_false;
      }
    else
      {
      ra->type = schemerlicht_object_type_false;
      }
    }
  }
  return;
  case SCHEMERLICHT_GETENV:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_GETENV);
  if (b == 0)
    {
    ra->type = schemerlicht_object_type_false;
    }
  else
    {
    schemerlicht_object* str = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(str) == schemerlicht_object_type_string)
      {
      const char* env = schemerlicht_getenv(str->value.s.string_ptr);
      if (env)
        {
        schemerlicht_object s = make_schemerlicht_object_string(ctxt, env);
        schemerlicht_object* heap_obj = &ctxt->heap[ctxt->heap_pos];
        schemerlicht_set_object(heap_obj, &s);
        ++ctxt->heap_pos;
        schemerlicht_set_object(ra, &s);
        }
      else
        {
        ra->type = schemerlicht_object_type_false;
        }
      }
    else
      {
      ra->type = schemerlicht_object_type_false;
      }
    }
  }
  return;
  case SCHEMERLICHT_FILE_EXISTS:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_FILE_EXISTS);
  if (b == 0)
    {
    ra->type = schemerlicht_object_type_false;
    }
  else
    {
    schemerlicht_object* str = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(str) == schemerlicht_object_type_string)
      {
      int exists = schemerlicht_file_exists(str->value.s.string_ptr);
      if (exists == 0 && ctxt->filenames_list.vector_size > 0)
        {
        for (int i = cast(int, ctxt->filenames_list.vector_size - 1); i >= 0; --i)
          {
          schemerlicht_string* pathfile = schemerlicht_vector_at(&ctxt->filenames_list, cast(schemerlicht_memsize, i), schemerlicht_string);
          int pos = cast(int, pathfile->string_length) - 1;
          while (pos >= 0 && pathfile->string_ptr[pos] != '/' && pathfile->string_ptr[pos] != '\\')
            --pos;
          schemerlicht_assert(pos < 0 || pathfile->string_ptr[pos] == '/' || pathfile->string_ptr[pos] == '\\');
          if (pos > 0)
            {
            schemerlicht_string path;
            schemerlicht_string_init_ranged(ctxt, &path, pathfile->string_ptr, pathfile->string_ptr + pos + 1);
            schemerlicht_string_append(ctxt, &path, &str->value.s);
            exists = schemerlicht_file_exists(path.string_ptr);
            schemerlicht_string_destroy(ctxt, &path);
            if (exists)
              break;
            }
          }
        }
      if (exists)
        {
        ra->type = schemerlicht_object_type_true;
        }
      else
        {
        ra->type = schemerlicht_object_type_false;
        }
      }
    else
      {
      ra->type = schemerlicht_object_type_false;
      }
    }
  }
  return;
  case SCHEMERLICHT_INTERACTION_ENVIRONMENT:
  {
  UNUSED(b);
  UNUSED(c);
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_INTERACTION_ENVIRONMENT);
  ra->type = schemerlicht_object_type_environment;
  ra->value.ptr = cast(void*, ctxt);
  }
  return;
  case SCHEMERLICHT_IS_ENVIRONMENT:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_IS_ENVIRONMENT);
  if (b > 0)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_environment)
      ra->type = schemerlicht_object_type_true;
    else
      ra->type = schemerlicht_object_type_false;
    }
  else
    {
    ra->type = schemerlicht_object_type_false;
    }
  }
  return;
  case SCHEMERLICHT_NULL_ENVIRONMENT:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_NULL_ENVIRONMENT);
  schemerlicht_memsize heapsize = ctxt->raw_heap.vector_size;
  if (b > 0)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_fixnum)
      {
      heapsize = cast(schemerlicht_memsize, v->value.fx);
      }
    else if (schemerlicht_object_get_type(v) == schemerlicht_object_type_flonum)
      {
      heapsize = cast(schemerlicht_memsize, v->value.fl);
      }
    }
  ra->type = schemerlicht_object_type_environment;
  schemerlicht_context* new_ctxt = schemerlicht_context_init(ctxt, heapsize);
  schemerlicht_vector_push_back(ctxt, &ctxt->environments, new_ctxt, schemerlicht_context*);
  ra->value.ptr = cast(void*, new_ctxt);
  }
  return;
  case SCHEMERLICHT_SCHEME_ENVIRONMENT:
  {
  // R(A) := R(A)(R(A+1+C), ... ,R(A+B+C)) */
  schemerlicht_object* ra = schemerlicht_vector_at(&ctxt->stack, a, schemerlicht_object);
  schemerlicht_assert(schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive || schemerlicht_object_get_type(ra) == schemerlicht_object_type_primitive_object);
  schemerlicht_assert(ra->value.fx == SCHEMERLICHT_SCHEME_ENVIRONMENT);
  schemerlicht_memsize heapsize = ctxt->raw_heap.vector_size;
  if (b > 0)
    {
    schemerlicht_object* v = schemerlicht_vector_at(&ctxt->stack, a + 1 + c, schemerlicht_object);
    if (schemerlicht_object_get_type(v) == schemerlicht_object_type_fixnum)
      {
      heapsize = cast(schemerlicht_memsize, v->value.fx);
      }
    else if (schemerlicht_object_get_type(v) == schemerlicht_object_type_flonum)
      {
      heapsize = cast(schemerlicht_memsize, v->value.fl);
      }
    }
  ra->type = schemerlicht_object_type_environment;
  schemerlicht_context* new_ctxt = schemerlicht_context_init(ctxt, heapsize);
  schemerlicht_compile_callcc(new_ctxt);
  schemerlicht_compile_r5rs(new_ctxt);
  schemerlicht_compile_input_output(new_ctxt);
  schemerlicht_compile_modules(new_ctxt, ctxt->module_path.string_ptr);
  schemerlicht_vector_push_back(ctxt, &ctxt->environments, new_ctxt, schemerlicht_context*);
  ra->value.ptr = cast(void*, new_ctxt);
  }
  return;
  default:
    schemerlicht_throw(ctxt, SCHEMERLICHT_ERROR_NOT_IMPLEMENTED);
    return;
  }
